import java.util.Arrays;

//IMPORTANT NOTE:
//These tests are designed to help make sure you are on the correct track. However, they are not a substitute
//for actually testing your code on your own.
//In order to run the tests, you will need to make sure that you have written the appropriate method header for EVERY question that is required
//The tests work by executing your code, so if the method is not there, with the correct spelling, and the correct input/output
//the test cases will not compile!

public class AssignmentTwoTests
{
    public static void main(String[] args)
    {
        System.out.println("These tests are not always thorough. You need to do testing on your own as well to be certain your code is correct although these will help make sure you are on the right track!");
	testSimpsonsLaw();
	testLeadingDigit();
	testGenerateBenfordSequence();
        testCalculatePercentages();
        testCalculateDistance();
        System.out.println("No test for main method. (Make sure to test this yourself!)");
    }
    
    private static void testSimpsonsLaw()
    {
	System.out.println("Testing simpsons law");
        int[] input1 = {12, 48, 104, 411, 183, 582, 45, 140};
	validateSimpson(input1, true);
	
        int[] input2 = {183, 582, 45, 140, 12, 48, 104, 411};
	validateSimpson(input2, true);
	
        int[] input3 = {12, 48, 1, 411, 183, 582, 45, 140};
	validateSimpson(input3, false);
	
	System.out.println("Done testing Simpsons method");
    }
    
    private static void validateSimpson(int[] input, boolean expectedResult)
    {
        boolean actualResult = SimpsonsParadox.isSimpsonExample(input[0], input[1], input[2], input[3], input[4], input[5], input[6], input[7]);
        if (actualResult == expectedResult)
	{
	    System.out.println("PASS");
	}
	else
	{
	    System.out.print("Calling method with input: " + input[0] + " " + input[1] + " " + input[2] + " " + input[3] + " " + input[4] + " " + input[5] + " " + input[6] + " " + input[7] + "....");
	    System.out.print("Result is " + actualResult + "....Correct answer is..." + expectedResult + "...");
	    System.out.println("FAIL");
	}
    }
    
    private static void testLeadingDigit()
    {
        System.out.println("Testing leading digit method");
        validateLeadingDigit(300, 3);
        validateLeadingDigit(2,2);
        validateLeadingDigit(0,0);
        validateLeadingDigit(-53,5);
        System.out.println("Done testing leading digit method");
    }
    
    private static void validateLeadingDigit(int input, int expectedResult)
    {
        int actualResult = BenfordsLaw.calculateLeadingDigit(input);
	
        if (actualResult == expectedResult)
	{
	    System.out.println("PASS");
	}
	else
	{
	    System.out.print("Calling method with input: " + input + "....");
	    System.out.print("Result is " + actualResult + ".....Correct answer is " + expectedResult + "....");
	    System.out.println("FAIL");
	}
    }
    
    private static void testGenerateBenfordSequence()
    {
        System.out.println("Testing generating the Benford sequence");
        double[] correct = {100, 110, 121, 133.1};
        validateSequence(100, .1, 4, correct);
        System.out.println("Done testing generating the Benford sequence");
    }
    
    private static void testCalculatePercentages()
    {
        System.out.println("Testing calculate percentages");
        double[] correct = {0, .5, .25, 0, 0, 0, 0, 0, 0, .25};
        double[] input = {100, 200.1, 9.3, 10};
        validatePercentages(input, correct);
        System.out.println("Done testing calculate percentages");
    }
    
    private static void validateSequence(double initialAmount, double growthRate, int numberPeriods, double[] expectedAnswers)
    {
        final double tolerance = .00001;
        double[] actualAnswers = BenfordsLaw.generateBenfordNumbers(initialAmount, growthRate, numberPeriods);
        if (actualAnswers.length != expectedAnswers.length)
        {
	    System.out.println("FAIL : Incorrect number of entries generated with input of initialAmount = " + initialAmount + " growthRate = " + growthRate + " and numberPeriods = " + numberPeriods);
	    return;
        }
        
        for (int i = 0; i < expectedAnswers.length; i++)
	{
	    if (Math.abs(expectedAnswers[i] - actualAnswers[i]) > tolerance)
	    {
		System.out.println("FAIL : Incorrect number generated in period number " + (i+1) + " counting from 1, with input of initialAmount = " + initialAmount + " growthRate = " + growthRate + " and numberPeriods = " + numberPeriods + "Expected sequence " + Arrays.toString(expectedAnswers) + " ...got " + Arrays.toString(actualAnswers));
		return;
            }
        }
        
        System.out.println("PASS");
    }
    
    private static void validatePercentages(double[] input, double[] expectedAnswers)
    {
        final double tolerance = .00001;
        double[] actualAnswers = BenfordsLaw.calculateLeadingDigitProportions(input);
        if (actualAnswers.length != expectedAnswers.length)
        {
	    System.out.println("FAIL : Incorrect size of array");
	    return;
        }
        
        for (int i = 0; i < expectedAnswers.length; i++)
	{
            if (Math.abs(expectedAnswers[i] - actualAnswers[i]) > tolerance)
            {
                System.out.println("FAIL : Incorrect percentages generated for digit " + i + ". It occurs as a leading digit" + expectedAnswers[i] + " proportion of time but output is " + actualAnswers[i]);
                return;
            }
        }
        
        System.out.println("PASS");
    }
    
    private static void testCalculateDistance()
    {
	System.out.println("Testing Calculate Distance");
	//check that identical arrays have distance of 0
	double[] array1 = {1,2,0,3};
	double[] array2= {1,2,0,3};
	validateCalculateDistance(array1, array2, 0);
	
	double[] array3 = {1,2};
	double[] array4= {4,-2};
	validateCalculateDistance(array3, array4, 5);
	
	System.out.println("Done testing calculate distance");
    }
    
    private static void validateCalculateDistance(double[] array1, double[] array2, double expected)
    {
	double actual = BenfordsLaw.calculateDistance(array1, array2);
	if (Math.abs(actual - expected) < .001) //.001 to deal with rounding issues
	{
	    System.out.println("PASS");
	}
	else
	{
	    System.out.println("FAIL on input : " + Arrays.toString(array1) + " and " + Arrays.toString(array2) + " got distance of : " + actual + " and expected distance of " + expected);
	}
    }	
}