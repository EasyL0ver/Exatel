#include <msp430.h>
#include <stdio.h>

typedef int bool;
#define true 1
#define false 0

int delayValue = 32000;
void delay(void)
{
    volatile unsigned loops = delayValue; // Start the delay counter at 50,000
    while (--loops > 0)
        ;             // Count down until the delay counter reaches 0
}
void onboard_seg_display_init(void)
{
    PJSEL0 = BIT4 | BIT5;                   // For LFXT

    LCDCPCTL0 = 0xFFD0;		// Init. LCD segments 4, 6-15
    LCDCPCTL1 = 0xF83F;		// Init. LCD segments 16-21, 27-31
    LCDCPCTL2 = 0x00F8; 	// Init. LCD segments 35-39

    // Disable the GPIO power-on default high-impedance mode
    // to activate previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    // Configure LFXT 32kHz crystal
    CSCTL0_H = CSKEY >> 8;                  // Unlock CS registers
    CSCTL4 &= ~LFXTOFF;                     // Enable LFXT
    do
    {
        CSCTL5 &= ~LFXTOFFG;                  // Clear LFXT fault flag
        SFRIFG1 &= ~OFIFG;
    }
    while (SFRIFG1 & OFIFG);               // Test oscillator fault flag
    CSCTL0_H = 0;                           // Lock CS registers

    // Initialize LCD_C
    // ACLK, Divider = 1, Pre-divider = 16; 4-pin MUX
    LCDCCTL0 = LCDDIV__1 | LCDPRE__16 | LCD4MUX | LCDLP;

    // VLCD generated internally,
    // V2-V4 generated internally, v5 to ground
    // Set VLCD voltage to 2.60v
    // Enable charge pump and select internal reference for it
    LCDCVCTL = VLCD_1 | VLCDREF_0 | LCDCPEN;

    LCDCCPCTL = LCDCPCLKSYNC;               // Clock synchronization enabled

    LCDCMEMCTL = LCDCLRM;                   // Clear LCD memory

    LCDCCTL0 |= LCDON;
}
void clear()
{
    LCDM10 = 0;
    LCDM15 = 0;
    LCDM19 = 0;
    LCDM6 = 0;
    LCDM4 = 0;
    LCDM8 = 0;
}

void main(void)
{

    WDTCTL = WDTPW | WDTHOLD;       // Stop watchdog timer

    onboard_seg_display_init();     // Init the LCD

    // init. external buttons
    P1DIR &= ~BIT1;
    P1REN |= BIT1;
    P1OUT |= BIT1;

    P1DIR &= ~BIT2;
    P1REN |= BIT2;
    P1OUT |= BIT2;

    long pos = 0;
    long pos2 = 0;
    int bpress = false;
    int b2press = false;
    while (1)                        // loop continuously
    {
        /*if(!(P1IN & BIT1) && (bpress == false)) {        // poll the input
         delayValue+=5000; // slows movement by 0.05 seconds
         bpress = true;
         }
         else if(!(P1IN & BIT1)){} // doesn't do anything after the button is pressed
         else{ // once the button is released, clear it.
         bpress = false;
         } */
        if (!(P1IN & BIT2) && (b2press == false))
        { // poll the second input
            delayValue -= 5000; // increasing speed by 0.05
            b2press = true;
        }
        else if (!(P1IN & BIT2))
        {
        }
        else
        {
            b2press = false;  //clears button2
        }
        clear();
        switch (pos)
        {
        case 0:
            LCDM10 |= 0x80;
            break;
        case 1:
            LCDM6 |= 0x80;
            (pos)++;
            break;
        case 2:
            LCDM4 |= 0x80;
            break;
        case 3:
            LCDM19 |= 0x80;
            break;
        case 4:
            LCDM15 |= 0x80;
            break;
        case 5:
            LCDM8 |= 0x80;
            break;
        case 6:
            LCDM8 |= 0x40;
            break;
        case 7:
            LCDM8 |= 0x20;
            break;
        case 8:
            LCDM8 |= 0x10;
            break;
        case 9:
            LCDM15 |= 0x10;
            break;
        case 10:
            LCDM15 = 0x00;
            LCDM19 |= 0x10;
            break;
        case 11:
            LCDM4 |= 0x10;
            break;
        case 12:
            LCDM6 |= 0x10;
            break;
        case 13:
            LCDM10 |= 0x10;
            break;
        case 14:
            LCDM10 |= 0x08;
            break;
        case 15:
            LCDM10 |= 0x04;
            pos = 0;
            break;
        }
        pos++;
        delay();
        if (!(P1IN & BIT1))
        {

            switch (pos)
            {
            case 0:
                LCDM6 = 0;
                LCDM10 = 0x80;
                pos--;
                break;
            case -1:
                LCDM10 = 0;
                LCDM10 = 0x04;
                pos--;
                break;
            case -2:
                LCDM10 = 0;
                LCDM10 = 0x08;
                pos--;
                break;
            case -3:
                LCDM10 = 0;
                LCDM10 = 0x10;
                pos--;
                break;
            case -4:
                LCDM10 = 0;
                LCDM6 = 0x10;
                pos--;
                break;
            case -5:
                LCDM6 = 0;
                LCDM4 = 0x10;
                pos--;
                break;
            case -6:
                LCDM4 = 0;
                LCDM19 = 0x10;
                pos--;
                break;
            case -7:
                LCDM19 = 0;
                LCDM15 = 0x10;
                pos--;
                break;
            case -8:
                LCDM15 = 0;
                LCDM8 = 0x10;
                pos--;
                break;
            case -9:
                LCDM8 = 0;
                LCDM8 = 0x20;
                pos--;
                break;
            case -10:
                LCDM8 = 0;
                LCDM8 = 0x40;
                pos--;
                break;
            case -11:
                LCDM8 = 0;
                LCDM8 = 0x80;
                pos--;
                break;
            case -12:
                LCDM8 = 0;
                LCDM15 = 0x80;
                pos--;
                break;
            case -13:
                LCDM15 = 0;
                LCDM19 = 0x80;
                pos--;
                break;
            case -14:
                LCDM19 = 0;
                LCDM4 = 0x80;
                pos--;
                break;
            case -15:
                LCDM4 = 0;
                LCDM6 = 0x80;
                pos = 0;
                break;
            }
            delay();

        }

    }

}