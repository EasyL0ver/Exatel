use std::fmt;

struct Block {
    x: u8,
    y: u8,
}

enum PieceKind {
   long,
   tshape,
   lshape,
   sshape,
}

struct Piece {
    kind: PieceKind,
    blocks: Vec<Block>,
}

impl Piece {
    fn new(points: Vec<(u8, u8)>) -> Piece {
        Piece {
            blocks: points.iter().map(|x| Block { x: x.0, y: x.1 }).collect(),
        }
    }
}
impl fmt::Display for Piece {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        
        let mut output = String::from("");
        for (i, block) in self.blocks.iter().enumerate(){
            output.push_str(&format!("#{}) x: {}, y: {}\n", i + 1, block.x, block.y));
        }
        write!(f, "{}", output)
    }
}

fn main() {
    let lp = Piece::new(vec![(1, 1), (1, 2), (1, 3), (1, 4)]);
    let sp = Piece::new(vec![(1, 1), (1, 2), (1, 3), (1, 4)]);
   
    println!("{}", lp) 
}