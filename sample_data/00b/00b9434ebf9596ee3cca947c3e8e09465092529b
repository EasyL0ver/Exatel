use std::collections::HashMap;

struct Foo<'a> {
    _phantom: std::marker::PhantomData<&'a ()>
}

struct FooCreator;

impl FooCreator {
    fn create_foo(&self) -> Foo {
        Foo{ _phantom: std::marker::PhantomData }
    }
}


struct FooManager<'a> {
    foo_creator: &'a FooCreator,
    foos: HashMap<u32, Foo<'a>>,
    last_id: u32,
}

impl<'a> FooManager<'a> {
    fn new(foo_creator: &'a FooCreator) -> Self {  
        FooManager {
            foo_creator,
            foos: HashMap::new(),
            last_id: 0
        }
    }
    
    fn add_foo(&mut self) {
        let foo = self.foo_creator.create_foo();
        self.foos.insert(self.last_id, foo);
        self.last_id += 1;
    }
}


fn main() {
    let foo_creator = FooCreator;
    let mut foo_manager = FooManager::new(&foo_creator);
    
    foo_manager.add_foo();
    foo_manager.add_foo();
    foo_manager.add_foo();
    
    println!("Current foo count: {}", foo_manager.last_id);
}