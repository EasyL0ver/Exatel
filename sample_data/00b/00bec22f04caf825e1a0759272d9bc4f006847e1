public class Child implements Serializable {

@Id
@GeneratedValue(strategy = GenerationType.TABLE)
@JsonProperty(access= Access.READ_ONLY)
private Long id;


@OneToOne(cascade=CascadeType.REMOVE, fetch = FetchType.LAZY)
@JoinColumn(name = "parent_id")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, 
property = "id")
@JsonIdentityReference(alwaysAsId = true)
private Parent parent;

//other attributes
//setters and getters
}

public class Parent implements Serializable {

@Id
@GeneratedValue(strategy = GenerationType.TABLE)
@JsonProperty(access= Access.READ_ONLY)
private Long id;`

//other attributes
//setters and getters
}
	
@POST
@ApiOperation(value = "Add a new child to the database")
@ApiResponses(value = {
        @ApiResponse(code = 201, message = "child created successfully."),
        @ApiResponse(code = 400, message = "Invalid child supplied in request body"),
        @ApiResponse(code = 409, message = "child supplied in request body conflicts with an existing child"),
        @ApiResponse(code = 500, message = "An unexpected error occurred whilst processing the request")
})
public Response createChild(@ApiParam(required = true)Child child) {

    if (child == null) {
        throw new RestServiceException("Bad Request", Response.Status.BAD_REQUEST);
    }

    Response.ResponseBuilder builder;

    try {
        // Go add the new child.
        childService.create(child);

       // Create a "Resource Created" 201 Response and pass the child back in case it is needed.
        builder = Response.status(Response.Status.CREATED).entity(child);


    } catch (ConstraintViolationException ce) {
        //Handle bean validation issues
        Map<String, String> responseObj = new HashMap<>();

        for (ConstraintViolation<?> violation : ce.getConstraintViolations()) {
            responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());
        }
        throw new RestServiceException("Bad Request", responseObj, Response.Status.BAD_REQUEST, ce);

    } catch (Exception e) {
        // Handle generic exceptions
        throw new RestServiceException(e);
    }

    log.info("createChild completed. child = " + child.toString());
    return builder.build();
}