#include <time.h>
#include <windows.h>
#include <math.h>
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
int k=0,n=0,g=2,xk=8,xK=1,r=0,r1=0,flag=0,cast=0;
char board[8][8],yk='E',yK='E',p,pr,c=219;
int x1,x2;
char eaten1[16]={' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
char eaten2[16]={' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
char index1[8]={'A','B','C','D','E','F','G','H'};
int index2[8]={1,2,3,4,5,6,7,8};
void printboard(char index1[],int index2[],char board[][8],char eaten1[],char eaten2[]);
int valid(int x1,char y1,int x2,char y2);
int freefromcheckwhite (int x1,char y1,int x2,char y2);
int freefromcheckblack(int x1,char y1,int x2,char y2);
int checkTurns(int x1,char y1);
int check1 (int xk,char yk,int xK,char yK);
int checkwhite (int xk,char yk,int xK,char yK);
int checkblack (int xk,char yk,int xK,char yK);
int stalemateWhite(int);
int stalemateBlack(int);
char u1[100][3];
int u2[100][4];
int main()
{
    char y1,y2,mode,temp;
    /*Initializing the initial board*/
    printf("1.New Game --- >> Press N\n");
    printf("1.Load --- >> Press L \n");
    char first=getch();
    if(first=='L')
    {
        FILE *fpointer;
        fpointer=fopen("save game.txt","r");
    while(!feof(fpointer)){
    for(int i=0;i<8;i++)
    {
        for(int j=0;j<8;j++)
        {
        fscanf(fpointer,"%c",&board[i][j]);
        }
    }
    for(int i=0;i<16;i++)
        {
            fscanf(fpointer,"%c",&eaten1[i]);
        }
        for(int i=0;i<16;i++)
        {
            fscanf(fpointer,"%c",&eaten2[i]);
        }
        fscanf(fpointer,"%d",&g);
    }
    fclose(fpointer);
    }
    else
    {
        for(int i=0;i<2;i++)
    {
        if(i==1)
        {
        for(int j=0;j<8;j++)
        {
            board[i][j]='P';
        }
        }
        else
        {
            for(int j=0;j<8;j++)
        {
            switch (j)
            {
                case 0: board[i][j]='R'; break;
                case 1: board[i][j]='N'; break;
                case 2: board[i][j]='B'; break;
                case 3: board[i][j]='Q'; break;
                case 4: board[i][j]='K'; break;
                case 5: board[i][j]='B'; break;
                case 6: board[i][j]='N'; break;
                case 7: board[i][j]='R'; break;
            }
        }
        }
    }
    for(int i=6;i<8;i++)
    {
        if(i==6)
        {
        for(int j=0;j<8;j++)
        {
            board[i][j]='p';
        }
        }
        else
        {
            for(int j=0;j<8;j++)
        {
            switch (j)
            {
                case 0: board[i][j]='r'; break;
                case 1: board[i][j]='n'; break;
                case 2: board[i][j]='b'; break;
                case 3: board[i][j]='q'; break;
                case 4: board[i][j]='k'; break;
                case 5: board[i][j]='b'; break;
                case 6: board[i][j]='n'; break;
                case 7: board[i][j]='r'; break;
            }
        }
        }
    }
    for(int i=2;i<6;i++)
    {
        for(int j=0;j<8;j++)
        {
            if ((i+j)%2==1)
                board[i][j]=' ';
            else
                board[i][j]=219;
        }
    }
    }
    printboard(index1,index2,board,eaten1,eaten2);
    printf("Enter the desired piece\n");
    scanf(" %c%d",&y1,&x1);
    printf("Enter the desired destination\n");
    scanf(" %c%d",&y2,&x2);
    fflush(stdin);
  while((valid(x1,y1,x2,y2)==0 || checkTurns(x1,y1)==0)){
    printf("NOT VALID MOVE\n");
    printf("Enter the desired piece\n");
    scanf(" %c%d",&y1,&x1);
    printf("Enter the desired destination\n");
    scanf(" %c%d",&y2,&x2);
    fflush(stdin);}
    g++;
    x1=x1-1;
    x2=x2-1;
    y1=y1-65;
    y2=y2-65;
    u1[r][0]=board[x1][y1];
    u1[r][1]=board[x2][y2];
    u2[r][0]=x1;
    u2[r][1]=y1;
    u2[r][2]=x2;
    u2[r][3]=y2;
    r++;
    r1=r;
    if((board[x2][y2]>=97 && board[x2][y2]<=122))
    {
        eaten1[k]=board[x2][y2];
        k++;
    }
    if((board[x2][y2]>=65 && board[x2][y2]<=90))
    {
        eaten2[n]=board[x2][y2];
        n++;
    }
    temp=board[x2][y2];
    board[x2][y2]=board[x1][y1];
    if((x1+y1)%2==1)
    {
        board[x1][y1]=' ';
    }
    else
    {
        board[x1][y1]=219;
    }
    /*Game Loop*/
    for(;;)
    {
    here:
    system("cls");
    if(check1(xk,yk,xK,yK)!=0){printf("\n\n                                            CHECK!");}
    printboard(index1,index2,board,eaten1,eaten2);
     if(checkblack(xk,yk,xK,yK)==1 && check1(xk,yk,xK,yK)==1)
    {
        printf("CHECKMATE ! Player 1 wins\n");
        break;
    }
    if(checkwhite(xk,yk,xK,yK)==1 && check1(xk,yk,xK,yK)==2)
    {
        printf("CHECKMATE ! Player 2 wins\n");
        break;
    }
    if(stalemateWhite(1)==1 || stalemateBlack(1)==1)
    {
        printf("IT'S A STALEMATE");
        break;
    }
    printf("To Move Press (M) , To Undo Press (U), To Redo Press (R), To Save Game press (S) \n");
    mode=getch();
    if(mode=='U' && r>0)
    {
        r--;
            if(u1[r][2]==' '){
    board[7][4]='k';
    board[7][u2[r][2]]=' ';
    board[7][u2[r][1]]=c;
    board[7][u2[r][0]]='r';}
    else if(u1[r][2]==c){
        board[0][4]='K';
        board[0][u2[r][2]]=c;
        board[0][u2[r][1]]=' ';
        board[0][u2[r][0]]='R';
        }

    else{
      x1=u2[r][0];
      y1=u2[r][1];
      x2=u2[r][2];
      y2=u2[r][3];
      board[x1][y1]=u1[r][0];
      board[x2][y2]=u1[r][1];
     if((board[x2][y2]>=97 && board[x2][y2]<=122))
    {
        k--;
        eaten1[k]=' ';
    }
    if((board[x2][y2]>=65 && board[x2][y2]<=90))
    {
        n--;
        eaten2[n]=' ';
    }}
      g--;
      goto here;
    }
    else if(mode=='R' &&r<r1)
    {
            if(u1[r][2]==' ')
    {
      board[7][u2[r][2]]='k';
      board[7][u2[r][1]]='r';
      board[7][4]=' ';
      board[7][u2[r][0]]=u1[r][1];
    }
   else if(u1[r][2]==c){
        board[0][u2[r][2]]='K';
         board[0][u2[r][1]]='R';
      board[0][4]=' ';
      board[0][u2[r][0]]=u1[r][1];
    }
    else{  x1=u2[r][0];
      y1=u2[r][1];
      x2=u2[r][2];
      y2=u2[r][3];
      board[x2][y2]=u1[r][0];
    if(u1[r][2]=='q'||u1[r][2]=='n'||u1[r][2]=='r'||u1[r][2]=='b'||u1[r][2]=='Q'||u1[r][2]=='N'||u1[r][2]=='B'||u1[r][2]=='R')
    {
      board[x2][y2]=u1[r][2];}
         if((x1+y1)%2==1)
    {
        board[x1][y1]=' ';
    }
    else
    {
        board[x1][y1]=219;
    }
      if((u1[r][1]>=97 && u1[r][1]<=122))
    {

        eaten1[k]=u1[r][1];
        k++;
    }
    if((u1[r][1]>=65 && u1[r][1]<=90))
    {

        eaten2[n]=u1[r][1];
           n++;
    }}
    r++;
    g++;
      goto here;
    }
    else if(mode=='S')
    {
        FILE * fpointer;
        fpointer=fopen("save game.txt","w");
        for(int i=0;i<8;i++)
        {
            for(int j=0;j<8;j++)
            {
                fprintf(fpointer,"%c",board[i][j]);
            }
        }
        for(int i=0;i<16;i++)
        {
            fprintf(fpointer,"%c",eaten1[i]);
        }
        for(int i=0;i<16;i++)
        {
            fprintf(fpointer,"%c",eaten2[i]);
        }
        fprintf(fpointer,"%d",g);
        fclose(fpointer);
        break;
    }
    else
    {
    printf("Enter the desired piece\n");
    scanf(" %c%d",&y1,&x1);
    printf("Enter the desired destination\n");
    scanf(" %c%d",&y2,&x2);
    fflush(stdin);
    while(valid(x1,y1,x2,y2)==0 || checkTurns(x1,y1)==0||freefromcheckwhite(x1,y1,x2,y2)==0||freefromcheckblack(x1,y1,x2,y2)==0){
    printf("NOT VALID MOVE\n");
    printf("Enter the desired piece\n");
    scanf(" %c%d",&y1,&x1);
    printf("Enter the desired destination\n");
    scanf(" %c%d",&y2,&x2);
    fflush(stdin);}
    if(board[x1-1][y1-65]=='k'){xk=x2;
    yk=y2;
    flag=1;}
    if(board[x1-1][y1-65]=='K'){xK=x2;
    yK=y2;
    flag=2;}
    x1=x1-1;
    x2=x2-1;
    y1=y1-65;
    y2=y2-65;
    if(board[x1][y1]=='k'&&x1==7&&y1==4&&x2==x1&&y2==2&&check1(8,67,xK,yK)==0&&check1(8,68,xK,yK)==0&&check1(8,66,xK,yK)==0&&board[7][0]=='r'&&board[7][3]==c&&board[7][2]==' '&&board[7][1]==c&&flag!=1){
cast=1;}
if(board[x1][y1]=='k'&&x1==7&&y1==4&&x2==x1&&y2==6&&check1(8,70,xK,yK)==0&&check1(8,71,xK,yK)==0&&board[7][7]=='r'&&board[7][5]==c&&board[7][6]==' '&&flag!=1){
cast=2;}
if(board[x1][y1]=='K'&&x1==0&&y1==4&&x2==x1&&y2==2&&check1(xk,yk,1,68)==0&&check1(xk,yk,1,67)==0&&check1(xk,yk,1,66)==0&&board[0][0]=='R'&&board[0][1]==' '&&board[0][2]==c&&board[0][3]==' '&&flag!=2){
cast=3;}
if(board[x1][y1]=='K'&&x1==0&&y1==4&&x2==x1&&y2==6&&check1(xk,yk,1,70)==0&&check1(xk,yk,1,71)==0&&board[0][7]=='R'&&board[0][5]==' '&&board[0][6]==c&&flag!=2){
cast=4;}
    if(cast==1&&board[x1][y1]=='k'){
        board[7][2]='k';
        board[7][3]='r';
        board[7][0]=' ';
        board[7][4]=' ';
        cast=0;
        u1[r][2]=' ';
        u1[r][1]=' ';
        u2[r][0]=0;
        u2[r][1]=3;
        u2[r][2]=2;
        r++;
        r1=r;
        }
    else if(cast==2&&board[x1][y1]=='k'){
        board[7][6]='k';
        board[7][5]='r';
        board[7][7]=c;
        board[7][4]=' ';
        cast=0;
          u1[r][2]=' ';
          u1[r][1]=c;
        u2[r][0]=7;
        u2[r][1]=5;
        u2[r][2]=6;
        r++;
        r1=r;
    }
    else if(cast==3&&board[x1][y1]=='K'){
        board[0][2]='K';
        board[0][3]='R';
        board[0][0]=c;
        board[0][4]=c;
        u1[r][2]=c;
        u1[r][1]=c;
        u2[r][0]=0;
        u2[r][1]=3;
        u2[r][2]=2;
         cast=0;
        r++;
        r1=r;
    }
    else if(cast==4&&board[x1][y1]=='K'){
        board[0][6]='K';
       