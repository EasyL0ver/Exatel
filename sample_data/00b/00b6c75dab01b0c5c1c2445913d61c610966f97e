function jointAngles = ikin( pos )
%Function to calculate the inverse kinematics of a 3DOF arm
%   Function inputs are a desired position for the arm to go to
%   Function outputs the joint angles necessary on RBE3001 arm to
%   achieve these angles

    % Change these out with imperical data
    t1Range = [-pi/2, pi/2];
    t2Range = [-pi/2, pi/2];
    t3Range = [-pi/2, pi/2];

    % Length of each link
    L1 = 135;
    L2 = 175;
    L3 = 169.28;
    
    % Pull out x and y positions from input vector
    xPos = pos(1);
    yPos = pos(2);

    % Calculate the rotation of base
    theta1 = atan2(yPos, xPos);
    
    % Offset the z axis by length of first link
    zPos = pos(3) - L1;
    % Calculate x based on new rotated coordinate plane
    xPos = sqrt(xPos^2 + yPos^2);
    
    % Calculate theta 2 and 3 in 2d reference plane
    theta2 = atan2(zPos, xPos) + acos((xPos^2 + zPos^2 + L2^2 - L3^2)/(2*L2*sqrt(xPos^2 + zPos^2)));
    theta3 = acos(((xPos^2 + zPos^2) - (L2^2 + L3^2)) / (2 * L2 * L3));
    
    % Offset theta3 by 90 degrees coordinate angles with encoders
    theta3 = theta3 - pi/2;
    
    % Save values in matrix
    jointAngles = [theta1, theta2, theta3];
    
    % Check if values are valid, error if they arent
    if isreal(jointAngles) == 0
       error('Point out of bounds');
    end
    if theta1 < t1Range(1) || theta1 > t1Range(2)
       error('Theta 1 out of range'); 
    end
    if theta2 < t2Range(1) || theta2 > t2Range(2)
       error('Theta 2 out of range'); 
    end
    if theta3 < t3Range(1) || theta3 > t3Range(2)
       error('Theta 3 out of range'); 
    end
end