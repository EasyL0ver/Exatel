TypeError using ctypes.byref
MNET_EXPORT int MNET_STDCALL MNet_SendData ( long Timeout, char *Cmd, int Term, char *Buf, BOOL Synchronous );
MNET_EXPORT int MNET_STDCALL MNet_WaitData ( long Timeout, char *Queue, char *Cmd, int *Term, char * Buf, long BSize );
	
Private Declare Function MNSendData Lib ".MNET.dll" Alias "MNet_SendData" (ByVal Timeout As Long, ByVal cmd As String, ByVal term As Long, ByVal buf As String, ByVal Synchronous As Long) As Long                                                                                      
Private Declare Function MNWaitData Lib ".MNET.dll" Alias "MNet_WaitData" (ByVal Timeout As Long, ByVal Queue As String, ByVal cmd As String, ByRef term As Long, ByVal buf As String, ByVal BSize As Long) As Long
	
class MNet: 

    def __init__(self) :

        try:
            MNetDll = ctypes.WinDLL (".MNet.dll")
        except Exception as e:
            raise WrpGeneralError("Could not load MNet.dllnn    The error was: %s" % e)

        try:
            MNetSendDataProto  = ctypes.WINFUNCTYPE (ctypes.c_int, ctypes.c_long, ctypes.c_char_p, ctypes.c_int, ctypes.c_char_p, ctypes.c_bool)
            MNetSendDataParams = (1, "Timeout", 0), (1, "Cmd", 0), (1, "Term", 0), (1, "Buf", 0), (1, "Synchronous", 0)
            self.__MNetSendData = MNetSendDataProto (("MNet_SendData",MNetDll), MNetSendDataParams)

            MNetWaitDataProto  = ctypes.WINFUNCTYPE (ctypes.c_int, ctypes.c_long, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_char_p, ctypes.c_long)
            MNetWaitDataParams = (1, "Timeout", 0), (1, "Queue", 0), (1, "Cmd", 0), (1, "Term", 0), (1, "Buf", 0), (1, "BSize", 0)
            self.__MNetWaitData = MNetWaitDataProto (("MNet_WaitData",MNetDll), MNetWaitDataParams)

        except Exception as e:
             raise WrpGeneralError("Could not map dll callnn    The error was: %s" % e)

    def MNetSendData(self, p_Timeout, p_Cmd, p_Term, p_Buf, p_Synchronous):

        Timeout     = ctypes.c_long(p_Timeout)
        Cmd         = ctypes.c_char_p(p_Cmd.encode('ascii'))
        Term        = ctypes.c_int(p_Term)
        Buf         = ctypes.c_char_p(p_Buf.encode('ascii'))
        Synchronous = ctypes.c_bool(p_Synchronous)

        try:
            result = self.__MNetSendData(Timeout,Cmd,Term,Buf,Synchronous)
        except Exception as e:
            raise WrpGeneralError("Could not call functionnn    The error was: %s" % e)

        if result < 1:
            self.__findMException(result)

    return result

    MNetWaitData_Last_Cmd  = ""
    MNetWaitData_Last_Term = 0
    MNetWaitData_Last_Buf  = ""

    def MNetWaitData(self, p_Timeout, p_Queue, p_BSize):

        Timeout = ctypes.c_long(p_Timeout)
        Queue   = ctypes.c_char_p(p_Queue.encode('ascii'))
        Cmd     = ctypes.c_char_p(self.MNetWaitData_Last_Cmd.encode('ascii'))
        Term    = ctypes.c_int(self.MNetWaitData_Last_Term)
        Buf     = ctypes.c_char_p(self.MNetWaitData_Last_Buf.encode('ascii'))
        BSize   = ctypes.c_long(p_BSize)

    try:
        result = self.__MNetWaitData(Timeout, Queue, Cmd, ctypes.byref (Term), Buf, BSize)
    except Exception as e:
        raise WrpGeneralError("Could not call functionnn    The error was: %s" % e)

    if result < 1:
        self.__findMException(result)

    if result == 1:
        self.MNetWaitData_Last_Cmd  = Cmd.value
        self.MNetWaitData_Last_Term = Term.value
        self.MNetWaitData_Last_Buf  = Buf.value

    return result
	
result = self.__MNetWaitData(Timeout, Queue, Cmd, ctypes.byref (Term), Buf, BSize)
    ctypes.ArgumentError: argument 4: <class 'TypeError'>: wrong type