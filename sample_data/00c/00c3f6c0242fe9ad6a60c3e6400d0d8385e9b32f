// I didn't compile this, there might be some simple bugs, but it gets the concept across

public class ItemStore implements Serializable {
        private Map<KeyType, int> _items;
        public ItemStore() {
                _items = new HashMap<KeyType, int>(100);
        }

	public static void main (String[] args)	{
		KeyType1 dog     = new KeyType1("dog");
		KeyType2 alsoDog = new KeyType2("dog");
		_items.put(dog, 1);
		// The following should not work because uniqueness is not satisfied
		_items.put(alsoDog, 2);
		// Iterate over table
		for (Map.Entry<KeyType, int> entry : _items.entrySet()) {
			System.out.println("Key: "+entry.getKey() + " Value: " + entry.getValue());
		}
	}
}

public class KeyType implements Serializable {
	private final String _val;
	public KeyType(String val) {
		_val = new String(val);
	}

	public String get() {
		return new String(_val);
	}

	@Override
	public int hashcode() {
		// SHOULD RETURN CONSISTENT RESULTS THAT HAVE ONLY TO DO WITH CONTENTS OF 
		// _val, RIGHT????? WRONG!
		return this.get().hashCode();
	}
	
}

public final class KeyType1 extends KeyType implements Serializable {
	public KeyType1(String val) {
		super(String(val))
	}
}

public final class KeyType2 extends KeyType implements Serializable {
	public KeyType2(String val) {
		super(String(val))
	}
}