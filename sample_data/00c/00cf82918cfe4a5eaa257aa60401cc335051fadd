function precacheAsset(el, count) {
		// Some attributes to check and control asset loading
		let src         = el.getAttribute('src'); // Source
        let precacheEl  = dummyPrecacheElement;   // Target element to use as precaching (defined somewhere else)

		// Promise based on texture load
		return new Promise(function(resolve, reject) {

			// Listens to texture load
			let loadFunction = function() {
				// If we've loaded all assets, precaching is done

				// Resolve promise
				resolve("TextureLoaded");
				// Remove this listener once texture's loaded
				precacheEl.removeEventListener('materialtextureloaded', loadFunction);
			}

			// Listens to texture load
			precacheEl.addEventListener('materialtextureloaded', loadFunction);

			// Performs asset loading on next cycle
			setTimeout(function(){
	    	precacheEl.setAttribute('src', src);
	    }, 500);
		}); // Promise done
	};

// Promise chaining, one after another
let firstPromise = Promise.resolve();

// Precache each element through promises
for (let i = 0; i < queriedElements.length; i++) {
	firstPromise = firstPromise.then(() => precacheAsset(queriedElements[i], i));
}