use std::borrow::Borrow;
use std::borrow::BorrowMut;

trait LensRead {
    type L;
    type R;

    fn get<'a, L, R>(self, l: L) -> &'a R
    where
        L: Into<&'a Self::L>,
        Self::L: 'a,
        Self::R: Borrow<R>;

    fn set<'a, L, R>(self, l: L, r: R) -> L
    where
        L: BorrowMut<Self::L>,
        Self::L: 'a,
        R: Into<Self::R>;
}

#[derive(Copy, Clone)]
struct First;

impl LensRead for First {
    type L = (String, Vec<i32>);
    type R = String;

    fn get<'a, L, R>(self, l: L) -> &'a R
    where
        L: Into<&'a Self::L>,
        Self::L: 'a,
        Self::R: Borrow<R>,
    {
        l.into().0.borrow()
    }

    fn set<'a, L, R>(self, mut l: L, r: R) -> L
    where
        L: BorrowMut<Self::L>,
        Self::L: 'a,
        R: Into<Self::R>,
    {
        {
            let orig_l = l.borrow_mut();
            orig_l.0 = r.into();
        }
        l
    }
}

fn foo() {
    let mut x = (String::from("hello"), vec![1, 2, 3]);
    println!("{:?}", x);
    let lens = First;
    lens.set(&mut x, String::from("lenses"));
    println!("{:?}", x);
    let x = lens.set(x, String::from("my_lenses"));
    println!("{:?}", x);
}

fn main() {
    foo()
}