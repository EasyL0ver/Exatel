void callbackFuntionLab(int event, int x, int y, int flags, void* userdata) {
	Mat *colorSpace = (Mat *)userdata;
	int k = 1;
	int N = 1;

	float ab_avg = 0;
	//printf("Dim = %d", sizeof(colorSpace[0]));

	//for (int i = 0; i < sizeof(colorSpace[0]); i++) {
	//	printf("Dim=%d\nVal = %d\n", sizeof(colorSpace[0]), colorSpace[0].at<uchar>(y, x));
	//}

	int treshold = 130;
	int w = 1;
	Mat dst = Mat::zeros(colorSpace[0].size(), CV_8U);
	imshow("imaginea lab =", *colorSpace);
	Mat channels[3];
	split(*colorSpace, channels);
	Mat L = channels[0].clone();
	Mat a = channels[1].clone();
	Mat b = channels[2].clone();


	if (event == EVENT_RBUTTONDOWN) {
		//region growing
		///uchar a_init = colorSpace[0].at<uchar>(y, x);
		///uchar b_init = colorSpace[1].at<uchar>(y, x);
		
		Mat labels = Mat::zeros((*colorSpace).size(), CV_8U);
		
		for (int i = -w; i <= w; i++) {
			for (int j = -w; j <= w; j++) {
				//printf("scadere = %d ", sqrt( pow(a.at<uchar>(y + i, x + j), 2) + 
				//							  pow(b.at<uchar>(y + i, x + j), 2)) );
				ab_avg += sqrt( (pow( (a.at<uchar>(y, x) - a.at<uchar>(y + i, x + j)), 2)  +
								 pow( (b.at<uchar>(y, x) - b.at<uchar>(y + i, x + j)), 2)) );
				// ab_avg += sqrt((colorSpace[0].at<uchar>(y, x) - colorSpace[0].at<uchar>(i, j)) +
				//	(colorSpace[1].at<uchar>(y, x) - colorSpace[1].at<uchar>(i, j)));
			}
		}
		printf("avg = %f\n", ab_avg);
		ab_avg /= 9.0;
		printf("avg = %f\n", ab_avg);
		
		
		queue <Point> que;
		que.push(Point(y, x));
		while (!que.empty()) {
			Point oldest = que.front();
			que.pop();
			for (int i = -w; i <= w; i++) {
				for (int j = -w; j <= w; j++) {
					if (isInside(oldest.x + i, oldest.y + j, labels.rows, labels.cols)) {
						if ((labels.at<uchar>(oldest.x + i, oldest.y + j) == 0) &&
							(sqrt((pow((a.at<uchar>(y, x) - a.at<uchar>(y + i, x + j)), 2) +
								   pow((b.at<uchar>(y, x) - b.at<uchar>(y + i, x + j)), 2))) - ab_avg < treshold)) {

							que.push(Point(oldest.x + i, oldest.y + j));
							labels.at<uchar>(oldest.x + i, oldest.y + j) = k;
							ab_avg = ((N * ab_avg) + 
									  sqrt((pow((a.at<uchar>(y, x) - a.at<uchar>(y + i, x + j)), 2) +
									       pow((b.at<uchar>(y, x) - b.at<uchar>(y + i, x + j)), 2)))) 
										/ (N + 1);

							/*ab_avg = sqrt((pow((a.at<uchar>(y, x) - a.at<uchar>(y + i, x + j)), 2) +
										   pow((b.at<uchar>(y, x) - b.at<uchar>(y + i, x + j)), 2)));*/

							N++;
						}
					}
				}
			}
		}
		
		for (int i = 0; i < dst.rows; i++) {
			for (int j = 0; j < dst.cols; j++) {
				if (labels.at<uchar>(i, j) == 1) {
					dst.at<uchar>(i, j) = 255;
				}
			}

		}
		imshow("dst", dst);

		Mat element1 = getStructuringElement(MORPH_RECT, Size(3, 3));
		erode(dst, dst, element1, Point(-1, -1), 2);
		dilate(dst, dst, element1, Point(-1, -1), 4);
		erode(dst, dst, element1, Point(-1, -1), 2);

		imshow("dupa dilatare si eroziune ", dst);
		
	}
}