#include <algorithm>
#include <functional>
#include <string>
#include <iostream>

using std::string;

bool xWillBeEqY(int x, int y)
{

    while (x != y)
    {

        x *= 2;
        if (x > y)
            return false;

    }
    return true;

}

string addNextCharsUntillEqX(string sequence,std::vector<int> subSequences, int x, char lastChar, int &current)
{
    int xd;

    while (subSequences[current] != x)
    {
        if (sequence[sequence.find(lastChar)] != lastChar)
        {
        current++;
        sequence.push_back(lastChar);
        subSequences[current] = subSequences[current-1] * 2;

        }
        lastChar++;

    }
    return sequence;

}

std::vector<int> whatShouldBeCurrentSubSequence(std::vector<int> subSequences, int start, int current)
{

}

int main()
{

	string sequence;
	int expSubSequences = 124, current = 0;
	std::vector<int> subSequences (100), lastOccurence (100);
	subSequences[0] = 1;
    char lastChar = 'A';
	while (subSequences[current] != expSubSequences)
    {
    if (xWillBeEqY(subSequences[current], expSubSequences))
        {
        std::cout << addNextCharsUntillEqX(sequence, subSequences, expSubSequences, lastChar, current);
        return 0;
        }
        else
        {

            for (int i = current; i > 0; i-- )
            {
                if (xWillBeEqY(subSequences[i] - 1, expSubSequences))
                {

                    subSequences[i] --;
                    sequence[i-1] = 'A';
                    std::cout<< addNextCharsUntillEqX(sequence, subSequences, expSubSequences, lastChar, current);
                    return 0;
                }
            }
                current++;
                sequence.push_back(lastChar);
                subSequences[current] = subSequences[current - 1] * 2;
                lastChar++;

        }
    }

	return 0;
}