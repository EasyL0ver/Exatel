from tkinter import *
import math
import struct
import idlelib.tooltip


class Supercalculator(object):
	def __init__(self):
		window = Tk()
		window.title('Supercalculator by: ')
		buttons = [	['Clr','MC','M+','M-','MR'],
					['d','e','f','+','-'],
					['a','b','c','/','*'],
					['7','8','9','**','√'],
					['4','5','6','sin','cos'],
					['1','2','3','tan','ln'],
					['0','.','±','~','2C'],
					['x','o','^','|','&'],
					['π','int','rad','//','exp'],
					['→IEEE','←IEEE','asin','acos','atan'],
					['bin','hex','oct','%','=']]

		for r in range(11):
			for c in range(5):
				def cmd(x=buttons[r][c]):
					self.click(x)

				b = Button(window, text=buttons[r][c], width=6, relief=RAISED, bg='darkgreen', fg='white', command=cmd)
				b.grid(row=r+1, column=c)

		self.entry = Entry(window, relief=RIDGE, borderwidth=3, width=20, bg='white', fg='blue',
							font=('Helvetica', 18))
		self.entry.grid(row=0, column=0, columnspan=5)

		self.memory = ''
		self.expr = ''
		self.StartOfNextOperand = True
		window.mainloop()

	def click(self,key):
		if key == '=':
			try:
				result = eval(self.expr + self.entry.get())
				self.entry.delete(0,END)
				self.entry.insert(END,result)
			except:
				self.entry.delete(0,END)
				self.entry.insert(END,'Error')

		elif key in '+-**//%':
			self.expr += self.entry.get()
			self.expr += key
			self.StartOfNextOperand = True

		elif key == '±':
			try:
				if self.entry.get()[0] == '-':
					self.entry.delete(0)
				else:
					self.entry.insert(0,'-')
			except IndexError:
				pass

		elif key == 'Clr':
			self.entry.delete(0,END)

		elif key == 'MC':
			self.memory = ''

		elif key == 'M+':
			self.memory = str(eval(self.memory+'+'+self.entry.get()))

		elif key == 'M-':
			self.memory = str(eval(self.memory+'-'+self.entry.get()))

		elif key == 'MR':
			self.entry.delete(0,END)
			self.entry.insert(END,self.memory)

		elif key == '√':
			result = math.sqrt(eval(self.entry.get()))
			self.entry.delete(0,END)
			self.entry.insert(END,result)

		elif key == '~':
			result = eval('~'+self.entry.get())
			self.entry.delete(0,END)
			self.entry.insert(END,result)

		elif key == 'sin':
			result = math.sin(eval(self.entry.get()))
			self.entry.delete(0,END)
			self.entry.insert(END,result)

		elif key == 'cos':
			result = math.cos(eval(self.entry.get()))
			self.entry.delete(0,END)
			self.entry.insert(END,result)

		elif key == 'tan':
			result = math.tan(eval(self.entry.get()))
			self.entry.delete(0,END)
			self.entry.insert(END,result)

		elif key == 'bin':
			newEntry = str(bin(int(self.entry.get())))
			self.entry.delete(0,END)
			self.entry.insert(END,newEntry)

		elif key == 'hex':
			newEntry = str(hex(int(self.entry.get())))
			self.entry.delete(0,END)
			self.entry.insert(END,newEntry)

		elif key == 'oct':
			newEntry = str(oct(int(self.entry.get())))
			self.entry.delete(0,END)
			self.entry.insert(END,newEntry)


		else:
			if self.StartOfNextOperand:
				self.entry.delete(0,END)
				self.StartOfNextOperand = False
			self.entry.insert(END, key)


Supercalculator()

'''
defabc, sincostanln, ~ 
'''