Improving MySQL query performance when using SUM
mysql> SELECT DATE(dt_submitted) AS date, 
              COUNT(*) AS count,
              SUM(IF(status='Approved', 1, 0)) as approved,
              SUM(IF(status='Approved-auto', 1, 0)) as approved_auto,
              SUM(IF(status='Rejected', 1, 0)) as rejected,
              SUM(IF(status='Pending', 1, 0)) as pending
       FROM post
       WHERE dt_submitted > DATE_SUB(CURDATE(), INTERVAL 30 DAY)
       GROUP BY date;
+------------+-------+----------+---------------+----------+---------+
| date       | count | approved | approved_auto | rejected | pending |
+------------+-------+----------+---------------+----------+---------+
| 2011-11-22 |   131 |      124 |             0 |        7 |       0 | 
| 2011-11-23 |   116 |      114 |             0 |        2 |       0 | 
...
| 2011-12-21 |   690 |      674 |             5 |       11 |       0 | 
| 2011-12-22 |    80 |       75 |             0 |        4 |      38 | 
+------------+-------+----------+---------------+----------+---------+
31 rows in set (0.60 sec)
	
explain SELECT DATE(dt_submitted) AS date, COUNT(*) AS count, SUM(IF(status='Approved', 1, 0)) as approved, SUM(IF(status='Approved-auto', 1, 0)) as approved_auto, SUM(IF(status='Rejected', 1, 0)) as rejected, SUM(IF(status='Pending', 1, 0)) as pending FROM post WHERE dt_submitted > DATE_SUB(CURDATE(), INTERVAL 30 DAY)  GROUP BY date;
+----+-------------+-------+------+---------------+------+---------+------+--------+----------------------------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows   | Extra                                        |
+----+-------------+-------+------+---------------+------+---------+------+--------+----------------------------------------------+
|  1 | SIMPLE      | post  | ALL  | NULL          | NULL | NULL    | NULL | 529902 | Using where; Using temporary; Using filesort | 
+----+-------------+-------+------+---------------+------+---------+------+--------+----------------------------------------------+
1 row in set (0.00 sec)