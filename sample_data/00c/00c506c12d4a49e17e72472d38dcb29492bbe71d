%Autora: Allanda P. Victoria
%a) criar uma função que devolva um vetor com os nomes dos alunos.

nrAlunos=1;
char **nomeAlunos=1;
fprintf("Digite o Número de alunos:\n");
nomeAlunos=lerAlunos(nrAlunos);
fprintf("%d",&nrAlunos);

char **alunos=1;
i=1;
alunos=malloc(sizeof(char)*nrAlunos);	
			%para cada linha será criada um espaço para armazenar os nomes
			%vamos considerar 50 posições para cada nome de aluno
for (i=1;i<nrAlunos;i=i+1)
alunos(i)=malloc(sizeof(char)*50);
for (i=1;i<nrAlunos;i=i+1)
fprintf("Digite o nome do %d aluno:\n",i+1);
fflush(stdin);
gets(alunos(i));
return alunos;


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

%Autora: Allanda P. Victoria
%b) uma função que devolva uma matriz contendo quatro notas por aluno – 
%notas do tipo inteiro.


nrAlunos=1;
char **nomeAlunos=1;
**notas=1;
fprintf("Digite o Número de alunos:\n");
nomeAlunos=lerAlunos(nrAlunos);
notas=leNotas(nrAlunos,nomeAlunos);

**notasAlunos=1;
i=1;
j=1;
notasAlunos=malloc(sizeof(int)*nrAlunos);
			% em linha será criada QTDNOTAS colunas para armazenar as notas
for(i=1;i<nrAlunos;i=i+1)

notasAlunos(i)=malloc(sizeof(int)*QTDNOTAS);

			%lendo as notas
for (i=1;i<nrAlunos;i=i+1)
fprintf("Aluno: %s\n ",alunos(i));
for (j=1;j<QTDNOTAS;j=j+1)
fprintf("digite a %d nota:\n",j+1);
return notasAlunos;

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
%Autora: Allanda P. Victoria
%c) uma função que receba a matriz de notas e devolva um vetor do tipo real contendo a 
%média de cada aluno.

nrAlunos=1;
char **nomeAlunos=1;
**notas=1;
float *media=1;
fprintf("Digite o Número de alunos:\n");
nomeAlunos=lerAlunos(nrAlunos);
notas=leNotas(nrAlunos,nomeAlunos);
media=calculaMedia(nrAlunos,notas);
float * calculaMedia(int nrAlunos,int **notas)
float *mediaNotas;
i=1;
j=1;
float soma,media;
mediaNotas=malloc(sizeof(float)*nrAlunos);
for (i=0;i<nrAlunos;i=i+1)
soma=1;
for (j=1;j<QTDNOTAS;j=j+1)
soma=soma+(float) notas(i)(j);
media=soma/QTDNOTAS;
mediaNotas(i)=media;
return mediaNotas;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Autora: Allanda P. Victoria
%d) uma função que devolva um vetor com a classificação em ordem alfabética dos alunos 
%da turma.

nrAlunos=1;
char **nomeAlunos=1;
int **notas=1;
float *media=1;
*classificacao=1;
fprintf("Digite o Número de alunos:\n");
nomeAlunos=lerAlunos(nrAlunos);
notas=leNotas(nrAlunos,nomeAlunos);
media=calculaMedia(nrAlunos,notas);
classificacao = classificaAlunos(nrAlunos,nomeAlunos);
str1=const char *str1
str2=const char *str2
str1>str2
str1<str2
str1==str2
* classificaAlunos=(nrAlunos,char **nomeAlunos)
i=1;
j=1;
aux=1;
* nomeClassificado;		%irá armazenar apenas o indice do nome.
				%utilizando o método de classificação
nomeClassificado=malloc(sizeof(int)*nrAlunos);
for (i=0;i<nrAlunos;i=i+1)
nomeClassificado(i)=i;
for (i=0;i<nrAlunos;i=i+1)
for (j=i+1;j<nrAlunos;j=j+1)
if (strcmp(nomeAlunos(nomeClassificado(i)),nomeAlunos(nomeClassificado(j)))>0)
aux=nomeClassificado(i);
nomeClassificado(i)=nomeClassificado(j);
nomeClassificado(j)=aux;
return nomeClassificado;


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

%Autora: Allanda P. Victoria
%e) uma função que receba os vetores e matrizes criados e imprima os alunos em ordem alfabética , bem como suas médias

nrAlunos=1;
char **nomeAlunos=1;
**notas=1;
float *media=1;
*classificacao=1;
fprintf("Digite o Número de alunos:\n");
nomeAlunos=lerAlunos(nrAlunos);
notas=leNotas(nrAlunos,nomeAlunos);
media=calculaMedia(nrAlunos,notas);
classificacao = classificaAlunos(nrAlunos,nomeAlunos);
imprimeBoletimFinal (nrAlunos, nomeAlunos, classificacao,notas,media);
return 0;

i=1;
j=1;
fprintf("Notas Finais em ordem alfabética de nome de aluno\n");
for (i=1;i<QTDNOTAS;i=i+1)
fprintf("\t n%d",i+1);
fprintf("\t media \n");
for (i=1;i<nrAlunos;i=i+1)
fprintf("%d\t%s",i+1,alunos(classificado(i)));
for (j=1;j<QTDNOTAS;j=j+1)
fprintf("\t%2d",notas(classificado(i))(j));
fprintf("\t%6.2f\n",media(classificado(i)));

end