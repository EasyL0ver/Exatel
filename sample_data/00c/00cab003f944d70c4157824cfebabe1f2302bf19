interface IFirmEntity { }
interface IClient : IFirmEntity { }

class Repository
{
    public Task<ReadOnlyCollection<IClient>> GetClientsAsync()
    {
        throw new NotImplementedException();
    }

    public ReadOnlyCollection<IClient> GetClients()
    {
        throw new NotImplementedException();
    }
}
	
var repo = new Repository();

// works b/c of covariance on IReadOnlyCollection<T>
IReadOnlyCollection<IFirmEntity> a1 = repo.GetClients();

// does not work b/c of invariance of Task<T>
Task<IReadOnlyCollection<IFirmEntity>> a2 = repo.GetClientsAsync();