using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace _4_Bezier
{
    public partial class Form1 : Form
    {
        PointF[] P = new PointF[6];
        Pen p1 = Pens.Red;
        Pen p = new Pen(Color.Yellow, 3f);
        Graphics g;

        public Form1()
        {
            InitializeComponent();

            P[0] = new PointF(200, 600);
            P[1] = new PointF(150, 250);
            P[2] = new PointF(800, 200);
            P[3] = new PointF(100, 130);
            P[4] = new PointF(130, 80);
            P[5] = new PointF(340, 30);
        }

        private void canvas_Paint(object sender, PaintEventArgs e)
        {
            g = e.Graphics;
            double t = 0;
            for (int i = 0; i < P.Length-1; i++)
            {
                g.DrawLine(p1, P[i], P[i + 1]);
            }
            
            double x0, y0, x1, y1;

            x0 = b0(t) * P[0].X + b1(t) * P[1].X + b2(t) * P[2].X + b3(t) * P[3].X +b4(t)*P[4].X+b5(t)*P[4].X;
            y0 = b0(t) * P[0].Y + b1(t) * P[1].Y + b2(t) * P[2].Y + b3(t) * P[3].Y + b4(t) * P[4].Y + b5(t) * P[4].Y;
            
            
            while (t<1)
            {
                t += 0.01;

                x1 = b0(t) * P[0].X + b1(t) * P[1].X + b2(t) * P[2].X + b3(t) * P[3].X + b4(t) * P[4].X + b5(t) * P[4].X;
                y1 = b0(t) * P[0].Y + b1(t) * P[1].Y + b2(t) * P[2].Y + b3(t) * P[3].Y + b4(t) * P[4].Y + b5(t) * P[4].Y;

                g.DrawLine(p, (float)x0, (float)y0, (float)x1, (float)y1);
                x0 = x1;
                y0 = y1;

            }
        

        }

        private double b0(double t)
        {
            return (1 - t) * (1 - t) * (1 - t) * (1 - t) * (1 - t);
        }
        private double b1(double t)
        {
            return 5 * t * (1 - t) * (1 - t) * (1 - t) * (1 - t);
        }
        private double b2(double t)
        {
            return 10 * t * t * (1 - t) * (1 - t) * (1 - t);