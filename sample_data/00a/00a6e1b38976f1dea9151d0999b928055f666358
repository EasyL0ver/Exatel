#pragma GCC optimize("O3","unroll-loops")
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout)
#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define FIXED cout << fixed << setprecision(20)
#define pb push_back
#define pf push_front
#define popb pop_back
#define popf pop_front
#define mp make_pair
#define hashmap unordered_map
#define hashset unordered_set
#define eps 1e-9
#define mod 1000000007
#define inf 1000000000000000007ll
#define intinf ((1 << 31) - 1)
#define f first
#define s second

#include <bits/stdc++.h>
using namespace std;

template<typename T1, typename T2> inline void checkmin(T1 &x, T2 y) { if (x > y) x = y; }
template<typename T1, typename T2> inline void checkmax(T1 &x, T2 y) { if (x < y) x = y; }
template<typename T1> inline void sort(T1 &arr) { sort(arr.begin(), arr.end()); }
template<typename T1> inline void shuffle(T1 &arr) { 
    for (int i = -int(arr.size()); i < arr.size(); ++i) {
        int f = ((rand() << 16) + rand()) % arr.size(), s = ((rand() << 16) + rand()) % arr.size();
        swap(arr[f], arr[s]);
    }
}
template<typename T1> inline void reverse(T1 &arr) { reverse(arr.begin(), arr.end()); }
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<vector<int>> graph;

vector<ll> parent;
ll curr;

void makeset(int v) {
    parent[v] = v;
}

int findset(int v) {
    if (parent[v] == v) return v;
    return parent[v] = findset(parent[v]);
}

void unionsets(int v, int u) {
    u = findset(u); v = findset(v);
    if (parent[u] != parent[v]) --curr;
    parent[u] = parent[v];
}

int main() {
    FAST;
    int n, m;
    cin >> n >> m;
    curr = n;
    vector<pll> edge(m);
    parent = vector<ll>(n);
    for (auto &i : edge) cin >> i.f >> i.s, --i.f, --i.s;
    int q;
    cin >> q;
    vector<ll> arr(q);
    vector<bool> used(m); 
    for (auto &i : arr) cin >> i, --i, used[i] = true;
    reverse(arr);
    for (int i = 0; i < n; ++i) makeset(i);
    for (int i = 0; i < m; ++i) 
        if (!used[i]) unionsets(edge[i].f, edge[i].s);
    vector<ll> ans;
    for (auto i : arr) {
        ans.pb(curr);
        unionsets(edge[i].f, edge[i].s);
    }
    reverse(ans);
    for (auto i : ans) cout << i << ' ';
    return 0;
}