#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int     fd;
   size_t  size;
   char    string[] = "Hello, world!";

   if((fd = open("myfile", O_WRONLY | O_CREAT, 0666)) < 0){
     printf("Can\'t open file\n");
     exit(-1);
   }

   size = write(fd, string, 14);

   if(size != 14){
     printf("Can\'t write all string\n");
     exit(-1);
   }

   if(close(fd) < 0){
     printf("Can\'t close file\n");
   }

   return 0;
}

#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int     fd;
   size_t  size;
   char    string[] = "Hello, world!";

   (void)umask(0);

   if((fd = open("myfile", O_WRONLY | O_CREAT, 0666)) < 0){
     printf("Can\'t open file\n");
     exit(-1);
   }

   size = write(fd, string, 14);

   if(size != 14){
     printf("Can\'t write all string\n");
     exit(-1);
   }

   if(close(fd) < 0){
     printf("Can\'t close file\n");
   }

   return 0;
}

#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int     fd[2];
   ssize_t size;
   char     string[] = "Hello, world!";
   char  resstring[14];

   if(pipe(fd) < 0){
     printf("Can\'t open pipe\n");
     exit(-1);
   }

   size = write(fd[1], string, 14);

   if(size != 14){
     printf("Can\'t write all string to pipe\n");
     exit(-1);
   }

   size = read(fd[0], resstring, 14);

   if(size < 0){
      printf("Can\'t read string from pipe\n");
      exit(-1);
   }

   printf("%s\n", resstring);

   close(fd[0]);
   close(fd[1]);

   return 0;
}

#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int     fd[2], result;

   size_t size;
   char  resstring[14];

   if(pipe(fd) < 0){
     printf("Can\'t open pipe\n");
     exit(-1);
   }

   result = fork();

   if(result < 0) {
      printf("Can\'t fork child\n");
      exit(-1);
   } else if (result > 0) {

     /* Parent process */

      close(fd[0]);

      size = write(fd[1], "Hello, world!", 14);

      if(size != 14){
        printf("Can\'t write all string to pipe\n");
        exit(-1);
      }

      close(fd[1]);
      printf("Parent exit\n");

   } else {

      /* Child process */

      close(fd[1]);
      size = read(fd[0], resstring, 14);

      if(size < 0){
         printf("Can\'t read string from pipe\n");
         exit(-1);
      }

      printf("Child exit, resstring:%s\n", resstring);

      close(fd[0]);
   }

   return 0;
}

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int     fd, result;

   size_t  size;
   char    resstring[14];
   char    name[] = "aaa.fifo";

   if(mknod(name, S_IFIFO | 0666, 0) < 0){
     printf("Can\'t create FIFO\n");
     exit(-1);
   }

   if((result = fork()) < 0){

      printf("Can\t fork child\n");
      exit(-1);

   } else if (result > 0) {

     /* Parent process */

      if((fd = open(name, O_WRONLY)) < 0){
         printf("Can\'t open FIFO for writting\n");
	 exit(-1);
      }

      size = write(fd, "Hello, world!", 14);

      if(size != 14){
        printf("Can\'t write all string to FIFO\n");
        exit(-1);
      }

      close(fd);
      printf("Parent exit\n");

   } else {

      /* Child process */

      if((fd = open(name, O_RDONLY)) < 0){
         printf("Can\'t open FIFO for reading\n");
	 exit(-1);
      }

      size = read(fd, resstring, 14);

      if(size < 0){
         printf("Can\'t read string from FIFO\n");
         exit(-1);
      }

      printf("Child exit, resstring:%s\n", resstring);

      close(fd);
   }
   return 0;
}