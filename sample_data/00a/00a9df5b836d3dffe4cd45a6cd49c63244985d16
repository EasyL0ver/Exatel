
import org.mariuszgromada.math.mxparser.*;

import java.util.Arrays;

public class MN_Z1L4 {
    public static void main(String[] args) {

        KrokEulera krokEulera = new KrokEulera();
        krokEulera.modifB();
        krokEulera.normB();
//        krokEulera.normA();
//        krokEulera.modifA();
        System.out.println(Arrays.toString(krokEulera.modifB()));
    }
}

class KrokEulera {

    private Argument deltaT = new Argument("deltaT = 0.01");
    private Argument tZero = new Argument("tZero = 0");
    private Argument tk = new Argument("tk = 10");
    private Function loop = new Function("loop(tk,deltaT) = tk/deltaT");

//    public double[] normA(){
//        Function f = new Function("f(x) = -x");
//        Function eul = new Function("eul(dt,x,f) = x + f * dt");
//        double[] EulerNorm = new double[(int)loop.calculate(tk,deltaT)];
//        System.out.println(loop.calculate(tk,deltaT));
//        double  Step = deltaT.getArgumentValue();
//        double valueOfF;
//        double valueOfX = 1;
//
//        for(double i = tZero.getArgumentValue(); i < loop.calculate(tk,deltaT); i++){
//
//            valueOfF = f.calculate(valueOfX);
//            EulerNorm[(int)i] = eul.calculate(Step,valueOfX,valueOfF);
//            valueOfX = eul.calculate(Step,valueOfX,valueOfF);
//        }
//        return EulerNorm;
//    }
//
//    public double[] modifA() {
//        Function f = new Function("f(x) = -x");
//        Function eul = new Function("eul(dt,x,f) = x + f * dt");
//        Function eulMod = new Function("eulMod(dt,x,f,f1) = x + 1/2*(f1 + f) * dt");
//        double[] EulerMod = new double[(int)loop.calculate(tk,deltaT)];
//        EulerMod[0] = 1;
//        double Step = deltaT.getArgumentValue();
//        double valueOfX = 1;
//        double valueOfF = f.calculate(valueOfX);
//        double valueOfF1 = f.calculate(eul.calculate(Step,valueOfX,valueOfF));
//        for (double i = tZero.getArgumentValue()+1; i < loop.calculate(tk,deltaT);i++){
//
//            EulerMod[(int)i] = eulMod.calculate(Step,valueOfX,valueOfF,valueOfF1);
//
//            valueOfX = EulerMod[(int)i];
//            valueOfF1 = f.calculate(EulerMod[(int)i]);
//            valueOfF = f.calculate(EulerMod[(int)i-1]);
//
//        }
//        return EulerMod;
//    }

    public double[] normB(){

        Constant v = new Constant("v=1");
        Constant b = new Constant("b = 50");
        Function f = new Function("f(x) = v*(1-x/b)*x",v,b);
        Function eul = new Function("eul(dt,x,f) = x + f * dt");
        double[] EulerNormB = new double[(int)loop.calculate(tk,deltaT)];
        double Step = deltaT.getArgumentValue();
        double valueOfX = 10;
        double valueOfF ;
        EulerNormB[0] = valueOfX;
        for(double i = tZero.getArgumentValue()+1; i < loop.calculate(tk,deltaT); i++){

            valueOfF = f.calculate(valueOfX);
            EulerNormB[(int)i] = eul.calculate(Step,valueOfX,valueOfF);
            valueOfX = eul.calculate(Step,valueOfX,valueOfF);
        }

        return EulerNormB;
    }

    public double[] modifB(){
        Constant v = new Constant("v=1");
        Constant b = new Constant("b = 50");
        Function f = new Function("f(x) = v*(1-x/b)*x",v,b);
        Function eul = new Function("eul(dt,x,f) = x + f * dt");
        Function eulMod = new Function("eulMod(dt,x,f,f1) = x + 1/2*(f1 + f) * dt");
        double[] EulerModB = new double[(int)loop.calculate(tk,deltaT)];

        double Step = deltaT.getArgumentValue();
        double valueOfX = 10;
        EulerModB[0] = valueOfX;
        double valueOfF = f.calculate(valueOfX);
        double valueOfF1 = f.calculate(eul.calculate(Step,valueOfX,valueOfF));
        for (double i = tZero.getArgumentValue()+1; i < loop.calculate(tk,deltaT);i++){

            EulerModB[(int)i] = eulMod.calculate(Step,valueOfX,valueOfF,valueOfF1);

            valueOfX = EulerModB[(int)i];
            valueOfF1 = f.calculate(EulerModB[(int)i]);
            valueOfF = f.calculate(EulerModB[(int)i-1]);

        }
        return EulerModB;
    }
    }