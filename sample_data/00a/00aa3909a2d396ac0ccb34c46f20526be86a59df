<?php

class City_Trip_Model extends Front_End_Model
{
	// Will return an array
	public function get_matched_prices($location, $page_number)
	{
		// Sorting criteria
		$where = '';
		$persons = 1;
		$nights = 0;
		
		if($this->input->post())
		{
			// Transport method
			if(is_numeric($this->input->post('transport')) && in_array($this->input->post('transport'), range(0, 4)))
			{
				$transport = $this->input->post('transport');
				
				$where .= " AND h.id IN (SELECT hotel_id FROM prices WHERE hotel_id = h.id AND transport = $transport)";
			}
			
			// number of persons
			if(is_numeric($this->input->post('persons')) && in_array($this->input->post('persons'), range(1, 6)))
			{
				$persons = $this->input->post('persons');
			}
			
			// Nights
			if(is_numeric($this->input->post('nights')) && in_array($this->input->post('nights'), range(1, 4)))
			{
				$nights = $this->input->post('nights');
			}
			
			// Prices
			if(is_numeric($this->input->post('price')) && is_int($this->input->post('price')/50))
			{
				$max = $this->input->post('price');
				
				$where .= " AND h.id IN (SELECT hotel_id FROM prices WHERE hotel_id = h.id AND p.price <= $max)";
			}
		}
		
		// Count total rows for pagination.
		// And get the possible departure dates.
		$total = $this->db->query("
			SELECT
				p.id,
				date_format(p.departure_date, '%d-%m-%Y') AS departure_date
			FROM
				prices p
				LEFT JOIN hotels h ON p.hotel_id = h.id
			WHERE
				p.city = '$location'
				AND p.hotel_id IS NOT NULL
				AND h.photo_url IS NOT NULL
				$where
			GROUP BY h.name
			ORDER BY p.departure_date
		");
		
		
		// Loop through the departure dates.
		$departure_dates = array();

		foreach($total as $date)
			if($date->departure_date && !in_array($date->departure_date, $departure_dates))
				$departure_dates[] = $date->departure_date;
		
		$this->departure_dates = $departure_dates;
		
		$total = $total->count();
		
		// Set up pagination
		$this->pagination = new Pagination(array(
	        'base_url'    => 'stedentrip-' . $location . '/',
	        'uri_segment' => 'stedentrip-' . $location,
			'items_per_page' => 10,
	        'total_items' => $total
		));
		
		// Get the right amount of rows and start at the right point.
		// The hotels are grouped by name, all of the different prices for transport methods will be stored in the prices alias
		// (INT)Transport_method:(INT)price:(VARCHAR)url|
		$query = "
			SELECT
				p.*,
				h.name AS hotel_name,
				h.photo_url AS hotel_picture,
				IFNULL(h.description, p.description) AS description,
				IFNULL(h.stars, p.stars) AS stars,
				GROUP_CONCAT(CONCAT(transport, '||', price, '||', p.url) SEPARATOR '(|)') AS prices,
				MIN(p.price) as price
			FROM
				prices p
				LEFT JOIN hotels h ON p.hotel_id = h.id
			WHERE
				p.city = '$location'
				AND p.hotel_id IS NOT NULL
				AND h.photo_url IS NOT NULL
				$where
				GROUP BY h.name
				ORDER BY price ASC
			{$this->pagination->sql_limit}
		";
		
		$array = array();
		
		// Grab every single price.
		$prices = array();
		
		foreach($this->db->query($query)->result_array(FALSE) as $item)
		{
			$array[$item['hotel_name']] = $item;
			
			foreach(explode('(|)', $item['prices']) as $price)
			{
				list($transport_id, $price, $url) = explode('||', $price);
				
				switch($transport_id)
				{
					case 1:
						$transport_type = 'bus';
					break;
					case 2:
						$transport_type = 'train';
					break;
					case 3:
						$transport_type = 'airplane';
					break;
					case 4:
						$transport_type = 'ferry';
					break;
					default:
						$transport_type = 'own_transport';
					break;
				}
				
				// If the transport method does not exist. Add it to the array. If it exists, only add a new value in case it's lower.
				if(!isset($array[$item['hotel_name']][$transport_type]) || $array[$item['hotel_name']][$transport_type]['price'] > $price)
				{
					$array[$item['hotel_name']][$transport_type] = array('price' => ($persons * $price), 'url' => $url);
					$prices[] = ($persons * $price);
				}
			}
		}
		
		// Loop through the results to calculate the nights
		foreach($array as $hotel_name => $value)
		{
			if(isset($array[$hotel_name]['own_transport']['price']) && $nights)
			{
				// Calculate the amount that should be added to all of the known prices.
				$amount = ($array[$hotel_name]['own_transport']['price'] * ($nights - 1));
				
				foreach(array('own_transport', 'bus', 'train', 'airplane', 'ferry') as $type)
				{
					if(isset($array[$hotel_name][$type]))
					{
						$array[$hotel_name][$type]['price'] += $amount;
						
						$prices[] = $array[$hotel_name][$type]['price'] += $amount;
					}
				}	
			}
		}
		
		// Calculate the prices per 50. 50 - 100 - 150 - 200 etc...
		$new_prices = array();

		if($prices && !request::is_ajax())
		{
			for($t=50; $t<=max($prices); $t = $t+=50)
				$new_prices[] = $t;

			if(max($new_prices) < max($prices))
				$new_prices[] = max($new_prices) + 50;
		}
		
		$this->prices = $new_prices;
		
		return $array;
	}
	
	// Will return default database object
	// TODO: Why does the GROUP_CONCAT change the hotel positions? I just leave it here for now because it looks stupid
	// 		 If the list on the left is not similar to the list on the right.
	public function get_top_hotels($location, $limit = 10)
	{
		$query = "
			SELECT
				p.*,
				IFNULL(h.stars, p.stars) AS stars,
				h.name AS hotel_name,
				h.photo_url AS hotel_picture,
				GROUP_CONCAT(CONCAT(transport, '||', price, '||', p.url) SEPARATOR '(|)') AS prices,
				MIN(p.price) AS price
			FROM
				prices p
				LEFT JOIN hotels h ON p.hotel_id = h.id
			WHERE
				p.city = '$location'
				AND p.hotel_id IS NOT NULL
				AND h.photo_url IS NOT NULL
				GROUP BY h.name
				ORDER BY price ASC
				LIMIT $limit
		";
		
		return $this->db->query($query);
	}
}