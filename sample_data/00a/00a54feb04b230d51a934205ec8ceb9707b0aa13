define(
[
    'ko'
], function (ko) {
    'use strict';

    var mixin = {

        initialize: function () {
            this.isVisible = ko.observable(false);
            this.visible = ko.observable(false); //Shipping method is using visible instead of isVisible
            this._super();

            return this;
        }
    };

    return function (target) {
        return target.extend(mixin);
    };
});
	
active = this.getActiveItemIndex();
steps.each(function (elem, index) {
    if (active !== index) {
        elem.isVisible(false);
    }
});
	
{
0 : my-custom-step,
1 : payment
2 : shipping
}
	
.....    
 /**
 * @param {Object} itemOne
 * @param {Object} itemTwo
 * @return {Number}
 */
sortItems: function (itemOne, itemTwo) {
    return itemOne.sortOrder > itemTwo.sortOrder ? 1 : -1;
},

/**
 * @return {Number}
 */
getActiveItemIndex: function () {
    var activeIndex = 0;

    steps().sort(this.sortItems).some(function (element, index) {
        if (element.isVisible()) {
            activeIndex = index;

            return true;
        }

        return false;
    });

    return activeIndex;
},
 .....
	
{
0 : shipping,
1 : my-custom-step,
2 : payment
}
	
active = this.getActiveItemIndex();
steps.each(function (elem, index) {
    if (active !== index) {
        elem.isVisible(false);
    }
});