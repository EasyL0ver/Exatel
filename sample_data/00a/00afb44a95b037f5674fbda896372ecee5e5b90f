	const D3D_FEATURE_LEVEL lvl = {D3D_FEATURE_LEVEL_11_1};
	ID3D11Device* device;
	ID3D11DeviceContext* context;
	auto hr = D3D11CreateDevice(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, D3D11_CREATE_DEVICE_DEBUG, &lvl, 1, D3D11_SDK_VERSION, &device,
	                               nullptr, &context);

	if (FAILED(hr))
	{
		MessageBox(nullptr, "FAILED", "FATAL ERROR", MB_OK);
	}

	D3D11_TEXTURE2D_DESC buffer_desc;
	ZeroMemory(&buffer_desc, sizeof(buffer_desc));
	buffer_desc.Width = 1920;
	buffer_desc.Height = 1080;
	buffer_desc.MipLevels = 1;
	buffer_desc.ArraySize = 1;
	buffer_desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
	buffer_desc.SampleDesc.Count = 1;
	buffer_desc.Usage = D3D11_USAGE_IMMUTABLE;
	buffer_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
	buffer_desc.CPUAccessFlags = 0;
	buffer_desc.MiscFlags = 0;

	ID3D11Texture2D* texture[100];
	
	D3D11_SUBRESOURCE_DATA TexInitData;
	ZeroMemory(&TexInitData, sizeof(D3D11_SUBRESOURCE_DATA));
	TexInitData.pSysMem = heap_memory;
	TexInitData.SysMemPitch = static_cast<UINT>(4 * buffer_desc.Width);
	TexInitData.SysMemSlicePitch = static_cast<UINT>(4 * buffer_desc.Width * buffer_desc.Height);
	std::cout << "Texture creation begins" << std::endl;
	ramUsage();
	for (int i = 0; i < 100; i++)
	{
		std::cout << "Created texture number" << std::to_string(i) << std::endl;
		hr = device->CreateTexture2D(&buffer_desc, &TexInitData, &texture[i]);
		ramUsage();
	}