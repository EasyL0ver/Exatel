
#include <MPU6050_tockn.h>
#include <Wire.h>
#include "Adafruit_VL53L0X.h"

Adafruit_VL53L0X lox = Adafruit_VL53L0X();

const int firstLaserSensorPin = 4;
const int secondLaserSensorPin = 5;
bool evenCycle = true;

MPU6050 mpu6050(Wire);

long timer = 0;

void setup() {
  
  pinMode(firstLaserSensorPin, OUTPUT);
  pinMode(secondLaserSensorPin, OUTPUT);
  Serial.begin(9600);
  Wire.begin();
  mpu6050.begin();
  mpu6050.calcGyroOffsets(true);

  // wait until serial port opens for native USB devices
  while (! Serial) {
    delay(1);
  }
  
  // Put all sensors to low then delay
  digitalWrite(firstLaserSensorPin, LOW);
  digitalWrite(secondLaserSensorPin, LOW);
  delay(10);

  // Reset all sensors to high
  digitalWrite(firstLaserSensorPin, HIGH);
  digitalWrite(secondLaserSensorPin, HIGH);

  // Shut the second sensor down again
  digitalWrite(secondLaserSensorPin, LOW);
  if (!lox.begin(0x30)) {
    Serial.println(F("Failed to boot VL53L0X number 1"));
    while(1);
  }
  digitalWrite(secondLaserSensorPin, HIGH);
  delay(50);
  
  Serial.println("Adafruit VL53L0X test numbr 2");
  if (!lox.begin(0x29)) {
    Serial.println(F("Failed to boot VL53L0X number 2"));
    while(1);
  }

  
}

void loop() {
  mpu6050.update();

 /*if (evenCycle) {
    digitalWrite(firstLaserSensorPin, HIGH);
    digitalWrite(secondLaserSensorPin, LOW);
    evenCycle = false;
  } else {
    digitalWrite(firstLaserSensorPin, LOW);
    digitalWrite(secondLaserSensorPin, HIGH);
    evenCycle = true;
  }*/
  if(millis() - timer > 1000){
    
    Serial.println("=======================================================");
    Serial.print("temp : ");Serial.println(mpu6050.getTemp());
    Serial.print("accX : ");Serial.print(mpu6050.getAccX());
    Serial.print("\taccY : ");Serial.print(mpu6050.getAccY());
    Serial.print("\taccZ : ");Serial.println(mpu6050.getAccZ());
  
    Serial.print("gyroX : ");Serial.print(mpu6050.getGyroX());
    Serial.print("\tgyroY : ");Serial.print(mpu6050.getGyroY());
    Serial.print("\tgyroZ : ");Serial.println(mpu6050.getGyroZ());
  
    Serial.print("accAngleX : ");Serial.print(mpu6050.getAccAngleX());
    Serial.print("\taccAngleY : ");Serial.println(mpu6050.getAccAngleY());
  
    Serial.print("gyroAngleX : ");Serial.print(mpu6050.getGyroAngleX());
    Serial.print("\tgyroAngleY : ");Serial.print(mpu6050.getGyroAngleY());
    Serial.print("\tgyroAngleZ : ");Serial.println(mpu6050.getGyroAngleZ());
    
    Serial.print("angleX : ");Serial.print(mpu6050.getAngleX());
    Serial.print("\tangleY : ");Serial.print(mpu6050.getAngleY());
    Serial.print("\tangleZ : ");Serial.println(mpu6050.getAngleZ());
    Serial.println("=======================================================\n");
    timer = millis();
    
  }

VL53L0X_RangingMeasurementData_t measure;
    
  Serial.print("Reading a measurement... ");
  lox.rangingTest(&measure, true); // pass in 'true' to get debug data printout!

  if (measure.RangeStatus != 4) {  // phase failures have incorrect data
    Serial.print("Distance (mm): "); Serial.println(measure.RangeMilliMeter);
  } else {
    Serial.println(" out of range ");
  }
    
  delay(100);
  while(1);

}