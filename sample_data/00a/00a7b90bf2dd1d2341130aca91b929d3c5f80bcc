function Node(name, type) {
  this.name = name;
  this.nodes = {};
  this.type = type;
}

Node.prototype.getNode = function (name) {
  return this.nodes[name];
}

Node.prototype.addRelationship = function (otherNode) {
  this.nodes[otherNode.name] = otherNode;
  return this;
}

Node.prototype.getNeighbours = function () {
  var result = [];
  var self = this;
  Object.keys(this.nodes).forEach(function (name) {
    var node = self.nodes[name];
    result.push(node);
  });
  return result;
}

Node.prototype.toString = function () {
  return this.name + '(' + this.type + ')';
}

function join(a, b) {
  a.addRelationship(b);
  b.addRelationship(a);
}

var c1 = new Node('c1', 'mine');
var c2 = new Node('c2', 'safe');
var c5 = new Node('c5', 'safe');
var c3 = new Node('c3', 'safe');

join(c1, c2);
join(c1, c5);
join(c2, c5);
join(c3, c2);

function print(node, visited) {
  visited = visited || {};

  if (visited[node.name]) {
    return;
  }

  visited[node.name] = 1;

  var c = node.getNeighbours();
  var out = [];


  out.push(node.toString());

  c.forEach(function (child) {
    out.push(node.toString());
    print(child, visited);
  });

  console.log(out);
}

print(c1);