CREATE OR REPLACE Package Body USPPESP.PA_0800_INDICADORES_ME IS
xUsuario		varchar2(100):=user;
function fu_obtener_perfil_u( p_usuario varchar2) return varchar2 is
perfil varchar2(40);
begin
   select cperfil
   into perfil
   from usr_apl_perfil_rol_v
   where caplicacion = 'PES'
    and cusuario = p_usuario
    --and CROL_WF      =   p_rol
    and cperfil in('800_CAR_COM','ATD_EJE_CTE','RPV_DUM','ATD_ADM_COM','RPV_ADM_SERV_RI','800_INT',
'800_SUPERV','RPV_ADS','800_ADM_GC','800_ADM_PYM','800_SUP_GC','800_SUP_PYM','800_CEI','800_CAR',
'800_CIBA','800_CORRES','800_FACEXT')
    and rownum < 2;
    return(perfil);
    exception
      when NO_DATA_FOUND then
        ---tratar error
         --raise_application_error(-20000,'El usuario no tiene perfil para cargar en la solicitud');
         return('ROL');
end;
function fu_obtener_perfil_r( p_rol varchar2) return varchar2 is
perfil varchar2(40);
begin
   select cperfil
   into perfil
   from apl_perfil_rol_v
   where caplicacion = 'PES'
         and cperfil in('800_CAR_COM','ATD_EJE_CTE','RPV_DUM','ATD_ADM_COM','RPV_ADM_SERV_RI','800_INT',
'800_SUPERV','RPV_ADS','800_ADM_GC','800_ADM_PYM','800_SUP_GC','800_SUP_PYM','800_CEI','800_CAR',
 '800_CAR','800_CIBA','800_CORRES','800_FACEXT')
         and crol_wf = p_rol
         and rownum < 2;
    return(perfil);
    exception
      when NO_DATA_FOUND then
         raise_application_error(-20000,'El rol no tiene perfil para cargar en la solicitud');
end;
function fu_es_componente( itemkey varchar2) return boolean is
ESTA NUMBER;
begin
 select null
 into esta
 from DUAL
 WHERE
  exists (select null from pesp_wf_items
           where wri_item_key = itemkey );
 return(TRUE);
 exception when no_data_found then
  return(FALSE);
end ;
procedure inserta_pesp_indi_trmte(p_sol_nro_solic   rpv_items.sol_nro_solic%type,
                                  p_ren_nro_renglon rpv_items.ren_nro_renglon%type,
                                  p_itm_codigo      rpv_items.itm_codigo%type,
                                  p_fp_codigo       rpv_servicio_rpv.fp_codigo%type,
			          p_ITR_NPA         pesp_indi_trmte.itr_npa%type,
                                  p_ITR_NXX         pesp_indi_trmte.itr_nxx%type,
                                  p_prow_proceso_display varchar2,
                                  p_NOMBRE_COMPONENTE  pesp_indi_trmte.NOMBRE_COMPONENTE%type ) is
begin
        INSERT INTO pesp_indi_trmte
                (
                 sol_nro_solic ,
                 ren_nro_renglon ,
                 TRM_SEC,
                 --cent_id ,
                 itr_npa ,
                 itr_nxx ,
                 FECHA_CREACION ,
                 USUARIO_CREACION,
                 PROW_PROCESO_DISPLAY,
                 NOMBRE_COMPONENTE
                 )
                 VALUES
                (
                 p_sol_nro_solic ,
                 p_ren_nro_renglon ,
                 p_itm_codigo ,
                 --p_fp_codigo ,
                 p_itr_npa ,
                 p_itr_nxx ,
                 sysdate  ,
                 xUsuario,
                 p_PROW_PROCESO_DISPLAY,
                 p_NOMBRE_COMPONENTE
                 );
end;
procedure inserta_pesp_indi_reng(p_sol_nro_solic   rpv_items.sol_nro_solic%type,
                       p_ren_nro_renglon rpv_items.ren_nro_renglon%type,
                       p_tpe_codigo      pesp_renglon.tpe_codigo%type  ,
                       p_tmov_codigo     pesp_renglon.tmov_codigo%type    ,
                       p_clie_codigo     pesp_renglon.clie_codigo%type   ,
                       p_fecha_sol       date,
                       p_tpe_producto    varchar2,
                       p_estado          varchar2 ) is
begin
  INSERT INTO pesp_indi_reng
            (
             sol_nro_solic ,
             ren_nro_renglon ,
             tpe_codigo ,
             tmov_codigo ,
             clie_codigo ,
             IRE_ESTADO ,
             FECHA_CREACION,
             USUARIO_CREACION ,
             tpe_producto,
             IRE_FEC_SOLIC
            )
        VALUES
            (
              p_sol_nro_solic ,
             p_ren_nro_renglon ,
             p_tpe_codigo ,
             p_tmov_codigo ,
             p_clie_codigo ,
             p_estado,
             sysdate,
             xUsuario,
             p_tpe_producto,
             P_fecha_sol
            );
end;
procedure inserta_pesp_indi_items (p_sol_nro_solic   rpv_items.sol_nro_solic%type,
                                  p_ren_nro_renglon rpv_items.ren_nro_renglon%type,
                                  p_itm_codigo      rpv_items.itm_codigo%type,
                                  p_CPERFIL         varchar2,
				  p_ACW_ACTIVIDAD	varchar2,
                                  p_display_act     varchar2,
				  p_IIT_FEC_INICIO  date ,
                                  p_observaciones varchar2,
                                  p_performer     varchar2
			  ) is
begin
    INSERT INTO pesp_indi_items
               (
                sol_nro_solic ,
                ren_nro_renglon ,
                trm_sec ,
                cperfil ,
                acw_actividad ,
                iit_fec_inicio ,
                fecha_creacion ,
                usuario_creacion,
                ACW_ACTIVIDAD_DISPLAY ,
                IIT_IMPUTA_TASA,
                IIT_IMPUTA_TIEMPO,
                iit_observaciones,
                iit_performer
               )
               VALUES
               (
                p_sol_nro_solic ,
                p_ren_nro_renglon ,
                p_itm_codigo ,
                p_cperfil ,
                p_acw_actividad ,
                p_iit_fec_inicio ,
                sysdate ,
                xUsuario,
                p_DISPLAY_act,
                'S',
                'S',
                p_observaciones,
                p_performer
               );
end;
procedure update_pesp_indi_items (p_sol_nro_solic   rpv_items.sol_nro_solic%type,
                                  p_ren_nro_renglon rpv_items.ren_nro_renglon%type,
                                  p_itm_codigo      rpv_items.itm_codigo%type,
                                  p_CPERFIL         varchar2,
				  p_ACW_ACTIVIDAD	varchar2,
				  p_IIT_FEC_INICIO  date,
				  p_usuario  varchar2,
                                  p_iit_fec_fin date,
                                  p_resultado varchar2      ) is
cant number;
begin
  select 1
   into  cant
   from pesp_indi_items
   where sol_nro_solic     = p_sol_nro_solic and
         ren_nro_renglon   = p_ren_nro_renglon and
         TRM_SEC           = p_itm_codigo      and
         cperfil           = p_cperfil         and
         acw_actividad     = p_acw_actividad   and
         iit_fec_inicio    = p_iit_fec_inicio;
 update pesp_indi_items
   set   IIT_FEC_FIN     = p_iit_fec_fin,
         FECHA_ULT_MOD   = SYSDATE,
         USUARIO_ULT_MOD = p_usuario,
         resultado = p_resultado
   where sol_nro_solic     = p_sol_nro_solic and
         ren_nro_renglon   = p_ren_nro_renglon and
         TRM_SEC           = p_itm_codigo      and
         cperfil           = p_cperfil         and
         acw_actividad     = p_acw_actividad   and
         iit_fec_inicio    = p_iit_fec_inicio;
 exception
    when no_data_found then
         raise_application_error(-20000,'No encontro el registro en update de pesp_indi_items');
end;
procedure reasignar_indi(itemtype varchar2,itemkey varchar2,not_id number,p_fecha date,p_accion varchar2) is
p_sol_nro_solic   rpv_renglon_rpv.sol_nro_solic%type;
p_ren_nro_renglon rpv_renglon_rpv.ren_nro_renglon%type;
p_tpe_codigo      pesp_renglon.tpe_codigo%type;
p_tmov_codigo     pesp_renglon.tmov_codigo%type;
p_clie_codigo     pesp_renglon.clie_codigo%type;
p_fecha_sol       date;
p_srv_numero      pesp_servicios.srv_numero%type;
p_fp_codigo       rpv_servicio_rpv.fp_codigo%type;
p_itm_codigo      pesp_wf_items.itm_codigo%type;
p_tpe_producto    PESP_TIPO_PROD_ESP.tpe_producto%type;
p_CPERFIL         varchar2(30);
P_ACW_ACTIVIDAD   varchar2(40);
P_IIT_FEC_INICIO  date;
p_error           varchar2(200);
p_prow_proceso_display  VARCHAR2(80);
v_tabla           pac_wf_apis.tabla_actividad;
p_nom_act         varchar2(30);
p_display_act     varchar2(80);
P_USUARIO         varchar2(40);
p_estado          varchar2(3);
p_rol                 varchar2(30);
p_iit_fec_fin   date ;
p_resultado varchar2(30);
p_nombre varchar2(30);
p_itm_tipo varchar2(30);
p_observaciones  varchar2(2000);
p_performer      varchar2(30);
cant number;
begin
if  fu_es_componente(itemkey) then
 select
    a.sol_nro_solic,
    a.ren_nro_renglon,
    a.itm_codigo,
    itm_tipo
  into
    p_sol_nro_solic,
    p_ren_nro_renglon,
    p_itm_codigo,
    p_itm_tipo
  from
   pesp_wf_items a,
   rpv_items b
  where
   wri_item_key = itemkey
   and  a.sol_nro_solic = b.sol_nro_solic
   and   a.ren_nro_renglon = b.ren_nro_renglon
   and   a.itm_codigo = b.itm_codigo
   and rownum < 2;
 p_itm_codigo := NULL;
if p_itm_tipo not in ('DLI','DCR') then
  -- es un componente
  --insertar  los items
begin
   select
    sol_nro_solic,
    ren_nro_renglon,
    itm_codigo,
    wri_referencia
   into
    p_sol_nro_solic,
    p_ren_nro_renglon,
    p_itm_codigo,
    p_nombre
   from
    pesp_wf_items a,
    pesp_workflows_ri b
   where
   a.wri_item_key = itemkey
   and b.wri_item_key  = a.wri_item_key
   and not exists(select null
                  from
                    rpv_desvios_lineas B
                  where
                   b.sol_nro_solic  = a.sol_nro_solic
                   and b.ren_nro_renglon = a.ren_nro_renglon
                   and b.itm_codigo = a.itm_codigo
                   );
exception when no_data_found then
 null;
end ;