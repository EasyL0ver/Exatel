def parallelBuildStages = [:]
def parallelTestStages = [:]

parallelBuildStages["Build"] = {
    node
    {
        try
        {
            jobBuildResult = build('picotcp_build').result
            checkResult(jobBuildResult)
        }
        catch(e)
        {
            failStage()
        }
    }
}

parallelTestStages["Unit Tests"] = {
    node
    {
        try
        {
            jobBuildResult = build('picotcp_build_unit').result
            checkResult(jobBuildResult)
        }
        catch(e)
        {
            failStage()
        }
    }
}

parallelTestStages["Tests"] = {
    node
    {
        try
        {
            jobBuildResult = build('picotcp_build_test').result
            checkResult(jobBuildResult)
        }
        catch(e)
        {
            failStage()
        }
    }
}

def checkResult(result)
{
    if(result != 'SUCCESS')
    {
        failStage();
    }
}

def failStage()
{
    sh "exit 1"
}

stage('Building')
{
    parallel parallelBuildStages
}
stage('Testing')
{
    parallel parallelTestStages
}