-- test.ride_states
select r.*,
       -- accept
       ARRAY(
         SELECT STRUCT(
          TIMESTAMP_SECONDS(s.timestamp) as occurred_at,
          -- TODO: action_timestamp_ms is only available for accept_source=driver_accepted (not swaps, links, etc)
          s.user_id as driver_id,
          s.route_id,
          s.lat,
          s.lng,
          s.driver_eta,
          COALESCE(s.swapped, FALSE) as is_swapped,
          s.accept_source
         )
        FROM UNNEST(
             CASE WHEN accept_ride_state IS NULL THEN previous_accept_ride_states
                  ELSE ARRAY_CONCAT(
                       previous_accept_ride_states,
                       ARRAY(SELECT accept_ride_state)
                       )
                   END
           ) s
       ) AS ride_states_accept,
       -- cancel
       ARRAY(
         SELECT STRUCT(
          TIMESTAMP_SECONDS(s.timestamp) as occurred_at,
          -- TODO: action_timestamp_ms is only available if actor_role=driver
          CASE WHEN s.actor_role IN ('passenger', 'dispatcher', 'publicapi') THEN 'passenger'
               -- TODO: when canceled_by=admin, what is going on??
               WHEN s.actor_role IN ('admin', 'ridesapi_admin') THEN 'admin'
               WHEN s.bailed_out THEN 'bailout'
               WHEN s.no_show or s.wrong_party_size or s.no_charge THEN 'pickup'
               WHEN s.start_stop_preempt THEN 'start_stop'
               WHEN s.timestamp >= r.arrived_ride_state.timestamp and s.actor_role = 'driver' THEN 'driver_post_arrival'
               ELSE s.actor_role
               END AS cancel_type,
          COALESCE(
               s.actor_role IN ('passenger', 'admin', 'dispatcher', 'ridesapi_admin', 'publicapi')
            or (s.timestamp >= r.arrived_ride_state.timestamp and s.actor_role = 'driver'),
            FALSE) AS is_result_ride_termination,
          s.actor_role,
          s.cancel_reason,
          -- TODO: when canceled_by=admin passenger location is null
          s.lat AS passenger_lat,
          s.lng AS passenger_lng,
          -- TODO: driver location is null for bailout
          s.driver_lat,
          s.driver_lng,
          CASE WHEN s.actor_role = 'driver' OR s.bailed_out THEN s.user_id END AS driver_id,
          COALESCE(s.no_show, FALSE) AS is_now_show,
          COALESCE(s.bailed_out, FALSE) AS is_bailout,
          COALESCE(s.wrong_party_size, FALSE) AS is_wrong_party_size,
          COALESCE(s.no_charge, FALSE) AS is_no_charge,
          COALESCE(s.start_stop_preempt, FALSE) AS is_start_stop_preempt,
          COALESCE(s.cancel_penalty > 0, FALSE) AS is_cancel_penalty_charged
         )
         FROM UNNEST(
              CASE WHEN cancel_ride_state IS NULL THEN previous_cancel_ride_states
                   ELSE ARRAY_CONCAT(
                        previous_cancel_ride_states,
                        ARRAY(SELECT cancel_ride_state)
                        )
                    END
            ) s
       ) AS ride_states_cancel
  from `fsql-production.records.rides` r
 where STARTS_WITH(request_ride_state.region, 'SIM') = FALSE  # exclude simrides