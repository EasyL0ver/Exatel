const Command = require('../../structures/Command');
const icons = require('../../res/icons.json');
const { MessageEmbed } = require('discord.js');

class Ban extends Command {
    constructor(client) {
        super({
            name: 'ban'
        });
        
        this.client = client;
    }
    
    async exec(message, args) {
        
        // Create Embed
        const embed = new MessageEmbed();
        
        // Check Permissions
        if (!message.member.roles.has(this.client.db.get(`config_${message.guild.id}.moderatorRole`)) && !message.member.hasPermission('ADMINISTRATOR')) {
            embed.setFooter('Sorry, you don\'t have the proper permissions.').setColor(icons.invalidPermissionsColor).setTitle('Ban Command');
            return message.channel.hook(embed, {
                name: 'Invalid Permissions',
                icon: icons.invalidPermissions
            });
        }
        
        // Update Embed Color
        embed.setColor(icons.warningIconColor)
        
        // Check Target
        let target = message.mentions.members.first();
        if (!target) {
            embed.setFooter('Please mention a user, optionally followed by a reason.').setTitle('Ban Command');
            return message.channel.hook(embed, {
                name: 'Invalid Target',
                icon: icons.warningIcon
            });
        }
        
        // Check if executor has kicks remaining
        let actionsPerHour = this.client.db.get(`config_${message.guild.id}.moderatorActionsPerHour`);
        let previousActions = this.client.db.get(`userID_${message.author.id}_${message.guild.id}.moderatorActions.${this.client.dateToHour}`);
        if (!isNaN(actionsPerHour) && (actionsPerHour - ( previousActions ? previousActions.length : 0)) < 1) {
            embed.setFooter('Sorry, you don\'t have any bans remaining this hour.').setTitle('Ban Command');
            return message.channel.hook(embed, {
                name: 'Invalid Permissions',
                icon: icons.warningIcon
            });
        }
        // (5 - (x * y) = 4) = 1/y < 1 = y < 0 or y > 1
        // Check If Target Is Kickable
        if (!target.bannable) {
            embed.setFooter('Sorry, you can\'t ban that user.').setTitle('Ban Command');
            return message.channel.hook(embed, {
                name: 'Invalid Target',
                icon: icons.warningIcon
            });
        }
        
        // Create Kicked Embed
        let reason = args.join(' ').replace(target, '') || 'None Specified';
        const banEmbed = new MessageEmbed()
            .setColor('RED')
            .setTitle(`You have been banned from ${message.guild.name}.`)
            .addField('Executor', message.author.tag, true)
            .addField('Reason', reason, true);
        
        // Send To Kicked User
        await target.send(banEmbed);
        
        // Kick User
        try {
            target.ban(reason);
        } catch (e) {
            return message.channel.hook(embed.setFooter('Sorry, I can\'t ban that user.'), {
                name: 'Invalid Target',
                icon: icons.warningIcon
            });
        }
        
        // Update Moderator Actions
        let updatedActions = this.client.db.push(`userID_${message.author.id}_${message.guild.id}.moderatorActions.${this.client.dateToHour}`, { target: target.id, reason: reason, action: 'Ban' })['moderatorActions'][this.client.dateToHour];
        
        // Update Color
        banEmbed.setColor(icons.warningIconColor)
        
        // Send To Channel
        message.channel.hook(embed.setFooter(`Successfully banned ${target.user.tag}. You have ${ actionsPerHour - updatedActions.length} moderator actions remaining this hour.`), {
            name: 'User Banned',
            icon: icons.warningIcon
        });
        
        // Mod Logs
        let modLog = message.guild.channels.get(this.client.db.get(`config_${message.guild.id}.modLogs`));
        if (!modLog) return;
        modLog.hook(banEmbed.setTitle('').setAuthor(target.user.tag, target.user.displayAvatarURL()), {
            name: 'User Banned',
            icon: icons.warningIcon
        })
        
        // Add To Infractions
        target.user.addInfraction({
            executor: message.author.tag,
            action: 'banned',
            reason: reason
        })
        
    }
    
}

module.exports = Ban;