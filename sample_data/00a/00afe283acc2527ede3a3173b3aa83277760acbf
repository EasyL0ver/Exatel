package comp2402a5;


/**
 * This class implements the cuckoo hash 
 * 
 * See: Rasmus Pagh, Flemming Friche Rodler, Cuckoo Hashing, Algorithms - ESA 2001, 
 * Lecture Notes in Computer Science 2161, Springer 2001, ISBN 3-540-42493-8
 *
 * @param <T>
 */
public abstract class CuckooHashTable<T> extends OpenAddressHashTable<T> {
	
	/* add any attributes you may need here */
	
	MultiplicativeHashFunction h1 = null;
	MultiplicativeHashFunction h2 = null;

	int nzz = 0;
	int[] myZZ;
	Class<T> myClazz;
	double maxLoop = 100;
	int rehashFlag = 0;
	/**
	 * Create a new empty hash table
	 * @param clazz is the class of the data to be stored in the hash table
	 * @param zz is an array of integer values to be used for the hash functions
	 */
	public CuckooHashTable(Class<T> clazz, int[] zz) {

		super(clazz);
		f = new Factory<T>(clazz);
		d = 4;
		t = f.newArray(1<<d);
		n = 0;
		myZZ = zz;
		myClazz = clazz;

		h1 = new MultiplicativeHashFunction(myZZ[nzz++], w, d);
		h2 = new MultiplicativeHashFunction(myZZ[nzz++], w, d);
	}
	
	/* define all abstract methods inherited from parent class here */

	/**
	 * Resize the table
	 */
	protected void resize(){

	}

	/**
	 * Adds element x to the table if there does not already exist an item y
	 * in the table such that x.equals(y) is true.
	 *
	 * @param x is the item to add to the table
	 * @return true if x is successfully added to the table, returns false if there already
	 * an item y in the table such that x.equals(y) is true.
	 */
	public boolean add(T x) {
		int count = 0;
		T movingObject = x;
		T tempObject;

		if (find(x) == null) {
			if (((double)n+1 / t.length) > 0.5) {
				d++;
				rehash();
			}
			while (count < maxLoop) {
				int i = h1.hash(movingObject);
				if (t[i] == null) {
					t[i] = movingObject;
					n++;
					return true;
				} else {
					tempObject = t[i];
					t[i] = movingObject;
					movingObject = tempObject;
					count++;
				}
				i = h2.hash(movingObject);
				if (t[i] == null) {
					t[i] = movingObject;
					n++;
					return true;
				} else {
					tempObject = t[i];
					t[i] = movingObject;
					movingObject = tempObject;
					count++;
				}
			}
			if (rehashFlag == 0){
				rehash();
				if (add(movingObject)) return true;
			}
		}
		return false;
	}


	/**
	 * Remove the copy of x stored in this table if it exists.
	 * @param x  the item to remove
	 * @return the element y stored in the table such that x.equals(y) is true,
	 *  or null if no such element y exists
	 */
	public T remove(T x){
		int i = h1.hash(x);
		if (x.equals(t[i])){
			t[i] = null;
			n--;
			if (((double)n/t.length) < 0.125  && d >= 5) {
				d--;
				rehash();
			}
			return x;
		}
		i = h2.hash(x);
		if (x.equals(t[i])){
			t[i] = null;
			n--;
			if (((double)n/t.length) < 0.125  && d >= 5) {
				d--;
				rehash();
			}
			return x;
		}
		return null;
	}



	/**
	 * Get the copy of x stored in this table.
	 * @param x - the item to get
	 * @return - the element y stored in this table such that x.equals(y)
	 * is true, or null if no such element y exists
	 */
	public T find(Object x){
		int i = h1.hash(x);
		if (x.equals(t[i])) return t[i];
		i = h2.hash(x);
		if (x.equals(t[i])) return t[i];
		return null;
	}

	public void rehash(){
		rehashFlag = 1;
		T[] oldT = t;

		outerloop:
		while(rehashFlag == 1){
			h1 = new MultiplicativeHashFunction(myZZ[nzz++], w, d);
			h2 = new MultiplicativeHashFunction(myZZ[nzz++], w, d);
			n = 0;
			t = f.newArray(1<<d);

			for (int k = 0; k < oldT.length; k++){
				if (oldT[k] != null){
					if(!(add(oldT[k]))) continue outerloop;
				}
			}
			rehashFlag = 0;
		}
	}

/*	public static void main(String[] args) {
		System.out.println("Hello World!");
		int[] z = {0, 1, 2, 3};
		int[] zz= {355565525,355515551,351555553,325515555,395155759,355512554,355551555,355513554,355555155,355515054,135555505,255515554,555551555,655513554,755555155,855515054,95555505,45551555,955565525,385515551,357555553,325615555,395145759,355515554,355551535,355513524,355555151,305515054,935555505,855515554,755551555,555513554,655555155,155515054,95055505,45951555};
		CuckooHashTable c = new CuckooHashTable(Integer.class, zz);
		for (int i = 0; i < 10; i++){
			c.add(i);
			System.out.println("elements in list: " + c.size() + " n = " + c.n + " d = " + c.d + " length = " + c.t.length);
		}
		for (int i = 0; i < 10; i++){
			c.remove(i);
			System.out.println("elements in list: " + c.size() + " n = " + c.n + " d = " + c.d + " length = " + c.t.length);
		}
	}*/
}