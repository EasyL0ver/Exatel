using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GirlsGoneWild
{
    class Program
    {
        public static int counter = 0;
        public static int startingRow = 0;
        public static int startingCol = 0;
        public static List<string> used;

        static void Main()
        {
            var builder = new StringBuilder();
            int K = int.Parse(Console.ReadLine());
            var skirts = Console.ReadLine().ToCharArray();
            Array.Sort(skirts);

            used = new List<string>();

            int N = int.Parse(Console.ReadLine());

            var matrix = new string[K, skirts.Count()];

            for (int i = 0; i <= N; i++)
            {
                for (int j = 0; j < skirts.Count(); j++)
                {
                    matrix[i, j] = i.ToString() + skirts[j].ToString();
                }
            }

            Permutations(startingRow, startingCol, matrix, builder);
            Console.WriteLine(counter);
            Console.WriteLine(builder.ToString());
        }   
        
        static void Permutations(int startingRow, int startingCol, string[,] matrix, StringBuilder builder)
        {
            if (startingRow == matrix.GetLength(0) - 1)
            {
                return;
            }

            if (startingCol >= matrix.GetLength(1))
            {
                Permutations(startingRow + 1, 0, matrix, builder);
            }

            try
            {
                if (used.Contains(matrix[startingRow, startingCol]))
                {
                    Permutations(startingRow, startingCol + 1, matrix, builder);
                }
            }
            catch
            {
                return;
            }
                    

            string start = matrix[startingRow, startingCol];
            used.Add(start);
            
            for (int i = startingRow + 1; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (builder.ToString().Contains($"{start}-{matrix[i,j]}"))
                    {
                        continue;
                    }
                    if (j == startingCol)
                    {
                        continue;
                    }
                    builder.AppendLine($"{start}-{matrix[i,j]}");
                    counter++;
                }

            }

            Permutations(startingRow, startingCol + 1, matrix, builder);
            
        }
    }
}