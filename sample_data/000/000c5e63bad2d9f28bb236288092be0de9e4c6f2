#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
// Implementing Queue
struct Queue{
    int front;
    int rear;
    int *queue;
};
//Implement queue operations
bool isEmpty(struct Queue *new_queue){
  return (new_queue->rear == -1);
}
void enqueue(struct Queue *new_queue,int element,int size){
      if(new_queue->rear==size-1){
          printf("Queue is full\n");
  }
  else{
         if(new_queue->front==-1){
            new_queue->front = 0;
    }
        new_queue->rear++;
        new_queue->queue[new_queue->rear] = element;
  }
}
int dequeue(struct Queue *new_queue){
    int item;
     if(isEmpty(new_queue)){
        printf("Queue is empty\n");
        item = -1;
     }
     else{
        item = new_queue->queue[new_queue->front];
        new_queue->front++;
        if(new_queue->front > new_queue->rear){
            new_queue->front = -1;
            new_queue->rear = -1;
        }
     }
     return item;
}

//Implementing BFS using queue data structure
void bfs(int **adj_matrix,int size,int *dest,int *maxLen){
    int *visited = (int*)malloc(sizeof(int)*size),max=0,j=0,element;
    for(int i=0;i<size;i++){
        visited[i] = -1;
    }
    struct Queue *new_queue = (struct Queue*)malloc(sizeof(struct Queue));
    new_queue->queue = (int*)malloc(sizeof(int)*size);
    new_queue->front = -1;
    new_queue->rear = -1;
    enqueue(new_queue,*dest,size);
    visited[*dest] = 0;
    while(!isEmpty(new_queue)){
         element = dequeue(new_queue);
        for(int j=1;j<size;j++){
         if(visited[j]==-1 && adj_matrix[element][j])
           {
               enqueue(new_queue,j,size);
               visited[j] = visited[element]+1;
           }
        }
     }
     for(int i=1;i<size;i++){
        if(visited[i] >= *maxLen)
        {
            *maxLen = visited[i];
            *dest = i;
        }
     }
}

int main()
{
   int n,a,b,des=1,maxLen=0;
   scanf("%d",&n);
   int **adj_matrix = (int**)malloc(sizeof(int*)*n+1);
   for(int i=0;i<n+1;i++){
    adj_matrix[i] = (int*)calloc(n+1,sizeof(int));
   }
   // Building adjacency matrix
   for(int i=0;i<n-1;i++){
      scanf("%d %d",&a,&b);
      adj_matrix[a][b] = 1;
      adj_matrix[b][a] = 1;
    }
   bfs(adj_matrix,n+1,&des,&maxLen);
   bfs(adj_matrix,n+1,&des,&maxLen);
   printf("%d",maxLen);
   return 0;
}