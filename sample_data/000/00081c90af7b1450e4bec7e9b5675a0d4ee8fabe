#-*- coding: utf-8 -*-

import string
import random
import sys

def RC(tables) :
	return random.choice(tables)

def StringBuild(size, tables):
	tab	= []
	x	= 0
	while x < int(size) :
		tab.append(RC(tables))
		x += 1
	return "".join(tab)

def CreateKeys(TheString):
	list	= []
	for letter in TheString :
		list.append(int(ord(letter)))

	return list

class ACIlib :
	def __init__(self, password=False, mode="list", alpha=string.ascii_letters + string.digits + " "):
		self.AUTHOR		= "Dim4"
		self.PASSWORD		= password	# password ( soit une list, soit une chaine de caractere )
		self.ALPHABET		= alpha		# tables contenant les caracteres pour les chaines randoms
		self.MODE		= mode		# donne si le password est une list ou un chaine de caracteres

		if mode == "string" :
			self.KEYS	= CreateKeys(self.PASSWORD)
		elif mode == "list" :
			self.KEYS	= self.PASSWORD

		if self.PASSWORD == False :
			raise "Usage: ACIlib(password, alphabet)"

	def encrypt(self, text):
		EncryptText		= []
		x			= 0
#		print self.KEYS
		for letter in text :
			if x == len(self.KEYS) - 1 :
				size	= self.KEYS[x]
#				print "size encrypt : " + str(size)
				x	= 0
			else :
				size	= self.KEYS[x]
#				print size
				x += 1
			EncryptText.append(StringBuild(size, self.ALPHABET) + letter)
		return "".join(EncryptText)

	def decrypt(self, text, mode, password):
		DecryptText		= []
		if mode == "string" :
			self.KEYS	= CreateKeys(password)
		elif mode == "list" :
			self.KEYS	= password

		try :
			status		= True
			x		= 0
			pointeur	= 0
			while status == True :
				if x == len(self.KEYS) - 1:
					pointeur	+= int(self.KEYS[x])
					x = 0
				else :
					pointeur	+= int(self.KEYS[x])
					x += 1
				DecryptText.append(text[pointeur])
				pointeur += 1
		except IndexError :
			return "".join(DecryptText)