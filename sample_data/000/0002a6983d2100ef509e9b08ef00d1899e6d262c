import junit.framework.TestCase;

public class RomanNumeralsTest extends TestCase {
    
    public void testNumerals() {
           assertEquals("", 0);
           assertEquals("I", 1);
           assertEquals("II", 2);
           assertEquals("III", 3);
           assertEquals("IV", 4);
           assertEquals("V", 5);
           assertEquals("VI", 6);
           assertEquals("IX", 9);
           assertEquals("X", 10);
           assertEquals("XI", 11);
           assertEquals("XL", 40);
           assertEquals("L", 50);
           assertEquals("XC", 90);
           assertEquals("C", 100);
           assertEquals("D", 500);
           assertEquals("M", 1000);
           assertEquals("MDCCCLXXVIII", 1878);
           assertEquals("MCMLIII", 1953);
    }

    private void assertEquals(String numeral, int arabicNumber) {
        assertEquals(numeral, 
            new RomanNumeral(arabicNumber).toString());
    }
}

public class RomanNumeral {
    private static RomanNumeral numeral(String numeral, 
            int arabicNumber) {
        return new RomanNumeral(numeral, arabicNumber);
    }
    
    private static RomanNumeral[] elementaryNumerals = {
        numeral("M", 1000), 
        numeral("CM", 900),
        numeral("D", 500), 
        numeral("CD", 400),
        numeral("C", 100), 
        numeral("XC", 90),
        numeral("L", 50), 
        numeral("XL", 40),
        numeral("X", 10), 
        numeral("IX", 9),
        numeral("V", 5), 
        numeral("IV", 4),
        numeral("I", 1) 
    };
    
    private String numeral;
    private int arabicNumber;
    
    private RomanNumeral(String numeral,
            int arabicNumber) {
        this.numeral = numeral;
        this.arabicNumber = arabicNumber;
    }

    public RomanNumeral(int arabicNumber) {
        this("", 0);
        for (RomanNumeral elementaryNumeral : elementaryNumerals) {
            addAsOftenAsPossible(elementaryNumeral,
                arabicNumber);
        }
    }

    private void addAsOftenAsPossible(
            RomanNumeral elementaryNumeral, int limit) {
        while(canStillAdd(elementaryNumeral, limit)) {
            add(elementaryNumeral);
        }
    }

    private void add(RomanNumeral elementaryNumeral) {
        this.arabicNumber += elementaryNumeral.arabicNumber;
        this.numeral += elementaryNumeral.numeral;
    }

    private boolean canStillAdd(
            RomanNumeral elementaryNumeral, int limit) {
        return arabicRemainder(limit) >= 
            elementaryNumeral.arabicNumber;
    }

    private int arabicRemainder(int limit) {
        return limit - this.arabicNumber;
    }
    
    public String toString() {
        return numeral;
    }
}