package shadows.nobounce;

import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ActionResult;
import net.minecraft.util.EnumActionResult;
import net.minecraft.util.EnumHand;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.RegistryEvent.Register;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.relauncher.ReflectionHelper;
import net.minecraftforge.registries.IForgeRegistryEntry.Impl;
import thaumcraft.api.items.ItemsTC;
import thaumcraft.common.items.tools.ItemThaumometer;

@Mod(modid = NoBounce.MODID, name = NoBounce.MODNAME, version = NoBounce.VERSION, dependencies = "required-after:thaumcraft")
public class NoBounce {

	public static final String MODID = "nobounce";
	public static final String MODNAME = "Darko Hates Bounces";
	public static final String VERSION = "1.0.0";

	@EventHandler
	public void preInit(FMLPreInitializationEvent e) {
		MinecraftForge.EVENT_BUS.register(this);
	}

	@SubscribeEvent
	public void items(Register<Item> e) {
		Item newThaumometer = new ItemThaumometer() {
			@Override
			public boolean onEntitySwing(EntityLivingBase entityLiving, ItemStack stack) {
				return false;
			}

			@Override
			public String getCreatorModId(ItemStack itemStack) {
				return MODID;
			}

			@Override
			public ActionResult<ItemStack> onItemRightClick(World world, EntityPlayer p, EnumHand hand) {
				super.onItemRightClick(world, p, hand);
				return new ActionResult<>(EnumActionResult.FAIL, p.getHeldItem(hand));
			}
		};
		ReflectionHelper.setPrivateValue(Impl.class, newThaumometer, ItemsTC.thaumometer.getRegistryName(), "registryName");
		e.getRegistry().register(newThaumometer);
		ItemsTC.thaumometer = newThaumometer;
	}

}