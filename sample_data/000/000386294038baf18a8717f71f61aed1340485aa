package assignment3;
import java.io.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class Assignment3 
{
  private static Account account = new Account();

  public static void main(String[] args) 
  {
    Animal a1 = new Animal("Rhino", 9);
    Animal a2 = new Animal("Cow", 7);
    Animal a3 = new Animal("Horse", 5);
    Animal a4 = new Animal("Zebra", 5);
    Animal a5 = new Animal("Deer", 3);
    // Create a thread pool with two threads
    ExecutorService executor = Executors.newFixedThreadPool(2);
    executor.execute(new DepositTask());
    executor.execute(new WithdrawTask());
    executor.shutdown();

    System.out.println("Thread 1\t\tThread 2\t\tBalance");
  }
  
    public static class DepositTask implements Runnable 
    {
    @Override // Keep adding an amount to the account
    public void run() 
    {
      try 
      { // Purposely delay it to let the withdraw method proceed
        while (true) 
        {
          account.deposit((int)(Math.random() * 10) + 1);
          Thread.sleep(1000);
        }
      }
      catch (InterruptedException ex) 
      {
        ex.printStackTrace();
      }
    }
  }

  public static class WithdrawTask implements Runnable 
  {
    @Override // Keep subtracting an amount from the account
    public void run() 
    {
      while (true) 
      {
        account.withdraw((int)(Math.random() * 10) + 1);
      }
    }
  }

  // An inner class for account
  private static class Account 
  {
    // Create a new lock
    private static Lock lock = new ReentrantLock();

    // Create a condition
    private static Condition newDeposit = lock.newCondition();

    private int balance = 0;

    public int getBalance() 
    {
      return balance;
    }

    public void withdraw(int amount) 
    {
      lock.lock(); // Acquire the lock
      try 
      {
        while (balance < amount) 
        {
          System.out.println("\t\t\tWait for a deposit");
          newDeposit.await();
        }
        
        balance -= amount;
        System.out.println("\t\t\tWithdraw " + amount +
          "\t\t" + getBalance());
      }
      catch (InterruptedException ex) 
      {
        ex.printStackTrace();
      }
      finally 
      {
        lock.unlock(); // Release the lock
      }
    }

    public void deposit(int amount) 
    {
      lock.lock(); // Acquire the lock
      try 
      {
        balance += amount;
        System.out.println("Deposit " + amount +
          "\t\t\t\t\t" + getBalance());

        // Signal thread waiting on the condition
        newDeposit.signalAll();
      }
      finally 
      {
        lock.unlock(); // Release the lock
      }
    }
  }
  
  public class Animal 
    {
        private String animalName;
        private int requiredAmountOfFood;
        public Animal(String animalName, int requiredAmountOfFood) 
        {
            this.animalName = animalName;
            this.requiredAmountOfFood = requiredAmountOfFood;
        }
        public void setAnimalName(String animalName)
        {
           this.animalName = animalName; 
        }
         public String getAnimalName()
        {
            return animalName; 
        }
         public void setRequiredAmountOfFood(int requiredAmountOfFood)
         {
             this.requiredAmountOfFood = requiredAmountOfFood;
         }
         public int getRequiredAmountOfFood()
         {
             return requiredAmountOfFood;
         }
    }
}