<?php

/*
 * MIT License
 *
 * Copyright (c) 2018 RÃ©mi Blaise
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace App\DataFixtures;

use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Common\Persistence\ObjectManager;

abstract class AbstractFixture extends Fixture
{
    protected function create(string $className, ObjectManager $manager, array $data) {
        $entities = $this->instanciate('\App\Entity\\' . $className, $data);
        $this->save($className, $entities, $manager);
    }

    protected function instanciate(string $class, array $data) {
        return array_map(function($data) use ($class) {
            $entity = (new $class());
            foreach ($data as $key => $value) {
                [ $entity, 'set' . $key ]($value);
            }
            return $entity;
        }, $data);
    }

    protected function save(string $key, array $entities, ObjectManager $manager) {
        foreach ($entities as $i => $entity) {
            $manager->persist($entity);
            $this->addReference($key . '_' . $i, $entity);
        }

        $manager->flush();
    }

    protected function get(string $key) {
        $entities = [];
        $i = 0;
        while ($this->hasReference($key . '_' . $i)) {
            $entities[] = $this->getReference($key . '_' . $i++);
        }
        return $entities;
    }

    protected function getRandom(string $key, int $num = 1) {
        $entities = $this->get($key);

        if ($num == 0) {
            $num = mt_rand(0, count($entities));
        }

        $num = min($num, count($entities));

        if ($num == 0) {
            return [];
        }

        if ($num == 1) {
            return $this->getReference($key . '_' . mt_rand(0, count($entities) - 1));
        }

        return array_map(function($key) use ($entities) {
            return $entities[$key];
        }, array_rand($entities, $num));
    }
}