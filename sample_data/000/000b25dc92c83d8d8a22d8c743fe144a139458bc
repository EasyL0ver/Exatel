#include <bits/stdc++.h>

using namespace std;


#define all(x) (x).begin(), (x).end()
typedef long double ld;
typedef long long ll;

const int mod = 1e9 + 7;

int add(int x) {  
  return x;
}

template<typename... T>
int add(int x, T... y) {  
  x += add(y...);
  if (x >= mod)
    x -= mod;
  return x;
}

template<typename... T>
int udd(int &x, T... y) { 
  return x = add(x, y...);
}

template<typename... T>
int sub(int x, T... y) { 
  return add(x, mod - add(y...));
}

int mul(int x) { 
  return x;
}

template<typename... T>
int mul(int x, T... y) { 
  return 1ll * x * mul(y...) % mod;
}

int bin(int x, int to) { 
  int y = 1;
  while (to) { 
    if (to & 1)
      y = mul(x, y);
    x = mul(x, x);
    to >>= 1;
  }
  return y;
}

int inv(int x) { 
  assert(x != 0);
  return bin(x, mod - 2);
}

const int M = 55;

int d[M][M][M][M][M];

int s, e;
int n;
vector<int> xs, ys;
int x[M], y[M];

void add_point(int x, int y) {
  xs.push_back(x);
  ys.push_back(y);
}

void read() {
  xs.clear();
  ys.clear();

  cin >> n >> s >> e;
  add_point(s, 0);
  add_point(e, 2e9);

  for (int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i];
    swap(x[i], y[i]);
    add_point(x[i], y[i]);
  }
}

int get_x(int x) {
  return lower_bound(all(xs), x) - xs.begin() + 1;
}

int get_y(int y) {
  return lower_bound(all(ys), y) - ys.begin();
}

bool lt(int x, int y) {
  return x == 0 || (x < y);
}

int gt(int x, int y) {
  return x == 0 || (x > y);
}

int uax(int &x, int y) {
  if (x == 0)
    return x = y;
  else
    return x = max(x, y);
}

int uin(int &x, int y) {
  if (x == 0)
    return x = y;
  else
    return x = min(x, y);
}

void kill() {
  sort(all(xs));
  sort(all(ys));
  s = get_x(s);
  e = get_x(e);
  for (int i = 0; i < n; ++i) {
    x[i] = get_x(x[i]);
    y[i] = get_y(y[i]);
    assert(1 <= y[i] && y[i] <= n);
  }

  //cerr << "s = " << s << "\n";
  //cerr << "e = " << e << "\n";
  //for (int i = 0; i < n; ++i) {
    //cerr << x[i] << " " << y[i] << "\n";
  //}
  //cerr << "\n";

  for (int i = 0; i < M; ++i)
    for (int j = 0; j < M; ++j)
      for (int k = 0; k < M; ++k)
        for (int h = 0; h < M; ++h)
          for (int l = 0; l < M; ++l)
            d[i][j][k][h][l] = 0;

  bool was_s = false;
  bool was_e = false;
  d[0][0][0][0][0] = 1;

  for (int i = 0; i < n + 2; ++i) {
    int x = i + 1;

    if (s == x || e == x) {

      if (s == x) {
        was_s = true;
      }

      if (e == x) {
        was_e = true;
      }

      for (int upper = 0; upper <= n; ++upper)
        for (int lower = 0; lower <= n; ++lower)
          for (int up = 0; up <= n; ++up)
            for (int down = 0; down <= n; ++down)
              udd(d[i + 1][upper][lower][up][down],
                  d[i][upper][lower][up][down]);
    } else {
      int y = 0;
      for (int i = 0; i < n; ++i)
        if (::x[i] == x)
          y = ::y[i];

      assert(1 <= y && y <= n);
      for (int upper = 0; upper <= n; ++upper)
        for (int lower = 0; lower <= n; ++lower)
          for (int up = 0; up <= n; ++up)
            for (int down = 0; down <= n; ++down) {
              int cur = d[i][upper][lower][up][down];
              if (cur == 0)
                continue;
              
              // UP
              if (lt(upper, y) || was_e) {
                int nup = up;
                if (was_e)
                  uin(nup, y);
                udd(d[i + 1][upper][lower][nup][down], cur);
              }

              // DOWN
              if (gt(lower, y) || was_s) {
                int ndown = down;
                if (was_s)
                  uax(ndown, y);
                udd(d[i + 1][upper][lower][up][ndown], cur);
              }

              // LEFT
              if (lt(down, y) && gt(up, y)) {
                udd(d[i + 1][upper][lower][up][down], cur);
              }

              // RIGHT
              {
                int nupper = upper;
                int nlower = lower;
                if (!was_e)
                  uax(nupper, y);
                if (!was_s)
                  uin(nlower, y);
                udd(d[i + 1][nupper][nlower][up][down], cur);
              }
            }

    }
  }

  int ans = 0;
  for (int upper = 0; upper <= n; ++upper)
    for (int lower = 0; lower <= n; ++lower)
      for (int up = 0; up <= n; ++up)
        for (int down = 0; down <= n; ++down) {
          udd(ans, d[n + 2][upper][lower][up][down]);
        }
  ans = sub(bin(4, n), ans);
  cerr << ans << "\n";
  cout << ans << "\n";
}

int main() {
  int t;
  cin >> t;
  for (int i = 1; i <= t; ++i) {
    cout << "Case #" << i << ": ";
    read();
    kill();
    cerr << "Case #" << i << " done.\n";
  }
  return 0;
}