import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.tasks.bundling.BootJar
import java.time.LocalDate.now
import java.time.format.DateTimeFormatter

plugins {
    val kotlinVersion = "1.3.11"

    id("org.springframework.boot") version "2.1.2.RELEASE"
    id("org.jetbrains.kotlin.jvm") version kotlinVersion
    id("org.jetbrains.kotlin.plugin.spring") version kotlinVersion
    id("org.jetbrains.kotlin.plugin.jpa") version kotlinVersion
    id("io.spring.dependency-management") version "1.0.6.RELEASE"
}

repositories {
    mavenCentral()
}

fun computeVersionCode(): String {
    val buildNumber = System.getProperty("buildNumber", "1")

    return "${now().format(DateTimeFormatter.ofPattern("yyyyMMdd"))}-$buildNumber"
}

dependencies {
    /* Kotlin */
    compile("org.jetbrains.kotlin:kotlin-stdlib")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")

    /* Database Dependencies */
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("mysql:mysql-connector-java")

    /* Utils */
    compile("org.apache.commons:commons-lang3:3.7")

    /* Documentation */
    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("io.springfox:springfox-swagger-ui:2.9.2")

    /* Test Dependencies */
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude(module = "junit")
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testCompile("com.h2database:h2:1.4.197")
    testCompile("com.jayway.jsonpath:json-path:2.4.0")
    testCompile("io.mockk:mockk:1.8.13.kotlin13")
    testCompile("io.kotlintest:kotlintest-runner-junit5:3.1.11")

}

tasks {
    "compileKotlin"(KotlinCompile::class) {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = listOf("-Xjsr305=strict") // Build error if null assignment to non null variable
        }
    }

    "test"(Test::class) {
        useJUnitPlatform()
        testLogging {
            events("PASSED", "FAILED", "SKIPPED")
        }
    }

    "compileJava"(JavaCompile::class) {
        dependsOn(clean)
    }
}