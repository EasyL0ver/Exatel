import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Set;
import java.util.Map;

public class MostHomophones 
{

	public static void main(String[] args) throws IOException 
	{
		// for the Big O of an unordered Array List, the big O to insert in an arrayList that is
		// unordered is O(1), for insertFirst, it would be O(N), but for insertLast(), it would 
		// be O(1)
		
		// For the big O on an unordered Linked List, the big O when inserting first is O(1), 
		// the big O for inserting last is last is O(1), and the big O to insert anywhere is
		// O(n)
		File f = new File("src/project2-input.txt.");
		Map<String, List<String>> hmap = new TreeMap<String, List<String>>();
		Map<String, Integer> hmap1 = new TreeMap<String, Integer>();
		BufferedReader br = new BufferedReader(new FileReader(f));
		int count = 0;
		String BufferLine, key, value;
		List<String> valueList = null;
		while ((BufferLine = br.readLine()) != null) 
		{
			if ((BufferLine.charAt(0) != ';') && (BufferLine.charAt(1) != ';')) 
			{
				String[] splited = BufferLine.split("\\s+", 2);
				value = splited[0];
				key = splited[1];
				if (hmap.containsKey(key)) 
				{
					valueList = hmap.get(key);
					valueList.add(value);
					Collections.sort(valueList);
					hmap1.put(key, valueList.size());
				} 
				else 
				{
					valueList = new ArrayList<String>();
					valueList.add(value);
					hmap.put(key, valueList);
					hmap1.put(key, 1);

				}
			}
		}
		
		TreeMap<Integer, String> resultmap = new TreeMap<Integer, String>();
		List<String> resultlist = null;
		for (Map.Entry entry : hmap1.entrySet()) 
		{
			String resultvalue = (String) entry.getKey();
			int resultkey = (int) entry.getValue();
			if (!resultmap.containsKey(resultkey)) 
			{
				resultmap.put(resultkey, resultvalue);
			}
		}

		int k;
		int highestRank = resultmap.lastKey();
		System.out.println("enter 1000");
		Scanner in = new Scanner(System.in);
		int input = in.nextInt();
		int rankcount = 0;
		int totalcount = 0;
		int temp1 = input;
		while (totalcount <= input) 
		{
			int rank = highestRank - rankcount;
			System.out.println(rank);
			String temp = resultmap.get(rank); 
			if(rank == 0)
			{
				break;
			}
			// gSystem.out.println(temp);
			//List<String> result;
			List<String> result = hmap.get(temp);
			//while(rank != 0)
			//{
			//if(temp != null)
			//{
				//result = hmap.get(temp);
			//}
			//else
			//{
			//	result = new ArrayList<String>();
			//}
			//if(rank<=0)
			//	break;
			//}
			
			int Listsize = result.size();
			temp1 = temp1 - Listsize;
			if (!(temp1 <= 0)) {// get all elments of that list
				totalcount = totalcount + Listsize;
				for (int i = 0; i < Listsize; i++) 
				{
					System.out.println(result.get(i) + "\t" + rank);
				}
			} 
			else 
			{
				totalcount = totalcount + temp1;
				// get upto temp elemnts
				for (int i = 0; i < temp1; i++) 
				{
					System.out.println(result.get(i) + "\t" + rank);
				}
			}
			rankcount++;
		}
	}
}