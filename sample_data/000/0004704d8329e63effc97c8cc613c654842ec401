#include <bits/stdc++.h>
#define FOR(i, a, b)    for (int i = a; i <= b; ++i)
#define FOD(i, a, b)    for (int i = a; i >= b; --i)
using namespace std;
const int N = 2e3 + 3;
int n, a[N], b[N], F[N];
vector <int> V;
bool vis[N];
 
void compress() {
    FOR(i, 1, n) V.push_back(a[i]);
    sort(V.begin(), V.end()); V.erase(unique(V.begin(), V.end()), V.end());
    FOR(i, 1, n) b[i] = lower_bound(V.begin(), V.end(), a[i]) - V.begin() + 1;
}
 
void sol() {
    FOR(i, 1, n) {
        F[i] = i;
 
        memset(vis, 0, sizeof vis);
        vis[b[i]] = 1;
 
        int maxVal = a[i], minVal = a[i];
        int gcd = 0;
        FOD(j, i - 1, 1) {
            if (vis[b[j]]) break; else vis[b[j]] = 1;
 
            maxVal = max(maxVal, a[j]), minVal = min(minVal, a[j]);
            gcd = __gcd(gcd, a[j + 1] - a[j]);
            int Dist = (maxVal - minVal) / (i - j);
 
            if (gcd % Dist == 0) F[i] = min(F[i], F[j - 1] + 1);
        }
    }
    cout << F[n];
}
 
main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    //freopen("trash.inp", "r", stdin);
 
    cin >> n;
    FOR(i, 1, n) cin >> a[i];
 
    compress();
    sol();
}