from uagame import Window
import pygame, time
from pygame.locals import *
import random

def main():
    title = 'pong'
    x = 500
    y = 400
    
    window = Window(title,x,y)
    window.set_auto_update(False)
    game = Game(window)
    game.play()
    window.close()
    
class Ball:
    def __init__(self,radius,color,center,velocity,window):
        self.radius = radius
        self.color = color
        self.center = center
        self.window = window
        self.velocity = velocity

        self.paddle1_score = 0
        self.paddle2_score = 0
        
    def draw(self):
        self.surface = self.window.get_surface()
        
        pygame.draw.circle(self.surface, self.color, self.center, self.radius)
        
    def move(self,paddle1,paddle2):
        size = self.surface.get_size()
        for i in range(2):
            self.center[i] = (self.center[i] + self.velocity[i])

            #left/top 
            if self.center[i] < self.radius:
                self.velocity[i] = -self.velocity[i]
                    
            #right/bottom 
            if self.center[i] + self.radius > size[i]:
                self.velocity[i] = -self.velocity[i]

            #paddle2 score
            if self.center[0] < self.radius:
                self.paddle2_score = self.paddle2_score + 1
                return self.paddle2_score
                
            #paddle1 score
            if self.center[0] + self.radius > size[0]:
                self.paddle1_score = self.paddle1_score + 1
                return self.paddle1_score
            
        if paddle1.rect.collidepoint(self.center) and self.velocity[0] < 0:
            self.velocity[0] = -self.velocity[0]

        elif paddle2.rect.collidepoint(self.center) and self.velocity[0] > 0:
            self.velocity[0] = -self.velocity[0]        
            
class Paddle1:
    def __init__(self,color,location,window):
        self.color = color
        self.window = window
        self.location = location
        pygame.key.set_repeat(20, 20)
    
    def draw(self,paddle1_height):
        self.surface = self.window.get_surface()
        
        paddle_width = 10
        paddle_height = 40
        width = self.location
        lower_limit = 400 - paddle_height
        upper_limit = 0
        
        if paddle1_height > lower_limit:
            paddle1_height = lower_limit
        elif paddle1_height < upper_limit:
            paddle1_height = upper_limit
            
        self.paddle1_height = paddle1_height
        
        self.rect = pygame.Rect(width,self.paddle1_height,paddle_width,paddle_height)
        
        pygame.draw.rect(self.surface,self.color,self.rect)
    
class Paddle2:
    def __init__(self,color,location,window):
        self.color = color
        self.window = window
        self.location = location
        pygame.key.set_repeat(20, 20)
    
    def draw(self,paddle2_height):
        self.surface = self.window.get_surface()
        
        paddle_width = 10
        paddle_height = 40
        width = self.location
        
        lower_limit = 400 - paddle_height
        upper_limit = 0
        
        if paddle2_height > lower_limit:
            paddle2_height = lower_limit
        elif paddle2_height < upper_limit:
            paddle2_height = upper_limit        
        
        self.paddle2_height = paddle2_height
        
        self.rect = pygame.Rect(width,self.paddle2_height,paddle_width,paddle_height)
        
        pygame.draw.rect(self.surface,self.color,self.rect)
        
class Game:
    def __init__(self,window):
        self.window = window
        self.bg_color = pygame.Color('black')
        self.item_color = 'white'
        self.pause_time = 0.01
        self.close_clicked = False
        self.continue_game = True
        velocity = [2,1]
        center = [random.randint(110,390),random.randint(150,300)]
        pygame.key.set_repeat(20, 20)
        self.paddle1_height = 180
        self.paddle2_height = 180
        
        self.circle = Ball(5,pygame.Color(self.item_color),center,velocity,window)
        self.paddle1 = Paddle1(pygame.Color(self.item_color),100,window)
        self.paddle2 = Paddle2(pygame.Color(self.item_color),400,window)
        
    def play(self):
        while not self.close_clicked:
            self.handle_event()
            self.draw()
            
            if int(self.score1) == 11 or int(self.score2) == 11:
                self.continue_game = False
            
            if self.continue_game:
                self.update()
            time.sleep(self.pause_time)

    def handle_event(self):
        paddle_height = 40
        lower_limit = 400 - paddle_height
        upper_limit = 0        
        
        event = pygame.event.poll()
        if event.type == QUIT:
            self.close_clicked = True
        if self.continue_game:    
            if event.type == KEYDOWN:
                self.pressed_key = event.key
                key_pressed = pygame.key.get_pressed()
                
                #P is pressed - right paddle up
                if key_pressed[K_p]:
                    self.paddle2_height = self.paddle2_height - 10
                    if self.paddle2_height < 0:
                        self.paddle2_height = upper_limit
                    
                #L is pressed - right paddle down
                if key_pressed[K_l]:
                    self.paddle2_height = self.paddle2_height + 10
                    if self.paddle2_height > 400:
                        self.paddle2_height = lower_limit                
                    
                #Q is pressed - left paddle up
                if key_pressed[K_q]:
                    self.paddle1_height = self.paddle1_height - 10
                    if self.paddle1_height < 0:
                        self.paddle1_height = upper_limit                
                    
                #A is pressed - left paddle down
                if key_pressed[K_a]:
                    self.paddle1_height = self.paddle1_height + 10
                    if self.paddle1_height > 400:
                        self.paddle1_height = lower_limit
                            
    def draw(self):
        self.window.clear()
        self.circle.draw()
        
        self.paddle1.draw(self.paddle1_height)
        self.paddle2.draw(self.paddle2_height)
        
        self.score1 = str(self.circle.paddle1_score)
        self.score2 = str(self.circle.paddle2_score)
        
        x = 0
        y = 0
        self.window.set_font_size(70)
        
        self.window.draw_string(self.score1,x,y)
        
        self.surface = self.window.get_surface()
        size = self.surface.get_size()
        x = size[0] - self.window.get_string_width(self.score2)
        
        self.window.draw_string(self.score2,x,y)
            
        self.window.update()
        
    def update(self):
        self.circle.move(self.paddle1,self.paddle2)
          
main()