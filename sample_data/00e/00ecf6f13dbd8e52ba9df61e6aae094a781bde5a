package com.example;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.test.ConsumerRecordFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;

public class InteractiveQueryDemo {
    private static final String LETTERS_TOPIC = "letters";
    private KeyValueStore<Object, Object> store;
    private TopologyTestDriver driver;
    private ConsumerRecordFactory<String, String> recordFactory = new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());

    @Before
    public void setup() {
        StreamsBuilder builder = new StreamsBuilder();
        String lettersStore = "LettersStore";
        builder.globalTable(LETTERS_TOPIC, Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(lettersStore).withKeySerde(Serdes.String()).withValueSerde(Serdes.String()));
        Topology topology = builder.build();
        Properties config = new Properties();
        config.put(StreamsConfig.APPLICATION_ID_CONFIG, "interactive-query-demo");
        config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "dummy:1234");
        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());
        driver = new TopologyTestDriver(topology, config);
        store = driver.getKeyValueStore(lettersStore);
    }

    @After
    public void teardown() {
        try {
            driver.close();
        } catch (Exception e) {
            // Ignore shutdown error
        }
    }

    @Test
    public void shouldContainRecord() {
        driver.pipeInput(recordFactory.create(LETTERS_TOPIC, "a", "1"));
        assertThat(store.get("a")).isEqualTo("1");
    }
}