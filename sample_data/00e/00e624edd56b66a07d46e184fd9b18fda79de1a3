namespace PasswordChecker

  private
  Passpredicate : Type
  Passpredicate = String -> Bool

  private
  has : (Char -> Bool) -> Passpredicate
  has p pass = length (filter p (unpack pass)) >= (minimalCount config)
   
  private
  hasLower : Passpredicate 
  hasLower = has isLower
  
  private
  hasUpper : Passpredicate
  hasUpper = has isUpper
  
  private
  hasChars : Passpredicate
  hasChars pass = (has isLower pass) && (has isUpper pass)
  
  private
  hasDigits : Passpredicate
  hasDigits = has isDigit
 
  private
  goodLength : Passpredicate
  goodLength pass = (length pass) >= (minimalMasterPassLength config)
   
  private
  Check : Passpredicate -> (pass : String) -> Type
  Check p pass = Dec ((p pass) = True)

  private
  record PasswordCheckerData where
    constructor MkPasswordCheckerData
    len  : Check PasswordChecker.goodLength pass
    dig  : Check PasswordChecker.hasDigits  pass
    cha  : Check PasswordChecker.hasChars   pass
    upp  : Check PasswordChecker.hasUpper   pass
    low  : Check PasswordChecker.hasLower   pass 
  
  private
  passwordData : String -> PasswordCheckerData
  passwordData password = 
    MkPasswordCheckerData 
      (pred goodLength)
      (pred hasDigits)
      (pred hasChars)
      (pred hasUpper)
      (pred hasLower)
      where pred : (p : String -> Bool) -> Check p password
            pred p = predicateDec p password
            
  passwordChecker : String -> (Chec, String)
  passwordChecker password = 
    case passwordData password of
      (MkPasswordCheckerData (Yes prf) (Yes x) (Yes y) (Yes z) (Yes w)) => ?passwordChecker_rhs_2
      (MkPasswordCheckerData _ _ _ _ (No contra)) => ?passwordChecker_rhs_7
      (MkPasswordCheckerData _ _ _ (No contra) _) => ?passwordChecker_rhs_8
      (MkPasswordCheckerData _ _ (No contra) _ _) => ?passwordChecker_rhs_6
      (MkPasswordCheckerData _ (No contra) _ _ _) => ?passwordChecker_rhs_5
      (MkPasswordCheckerData (No contra) _ _ _ _) => ?passwordChecker_rhs_4