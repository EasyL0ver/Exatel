package geometry;

import javafx.scene.shape.Shape;

public class Quatrefoil extends GeometricObject {
	private double a;
	private double b;
	private Ellipse ellipse1, ellipse2, ellipse3, ellipse4;
	private Rectangle rectangle;

	public Quatrefoil() {
		super("Quatrefoil", 1, 0);
		points[0] = new Point(0, 0);
		a = 1;
		b = 1;
		calculateFigures();
	}

	public Quatrefoil(Point startPoint, double a, double b) {
		super("Quatrefoil", 1, 0);
		this.points[0] = new Point(startPoint);
		this.a = a;
		this.b = b;
		calculateFigures();

	}

	public Quatrefoil(Quatrefoil otherQuatrefoil) {
		super("Quatrefoil", 1, 0);
		this.points[0] = new Point(otherQuatrefoil.points[0]);
		a = otherQuatrefoil.a;
		b = otherQuatrefoil.b;
		calculateFigures();

	}

	private void calculateFigures() {
		double x = points[0].x;
		double y = points[0].y;
		Point point1 = new Point(x + a/2, y + b/2);
		rectangle = new Rectangle(point1, a, b);

		Point point2 = new Point(x + a / 2, y);
		Point point3 = new Point(x + a / 2, y + b);
		Point point4 = new Point(x, y + b / 2);
		Point point5 = new Point(x + a, y + b / 2);

		ellipse1 = new Ellipse(point2, a/2, a/2);
		ellipse2 = new Ellipse(point3, a/2, a/2);
		ellipse3 = new Ellipse(point4, b/2, b/2);
		ellipse4 = new Ellipse(point5, b/2, b/2);

	}

	@Override
	public Shape createShape(int scale) {
		Shape shape2 = rectangle.createShape(scale);

		Shape shape3 = ellipse1.createShape(scale);
		Shape shape4 = ellipse2.createShape(scale);
		Shape shape6 = ellipse3.createShape(scale);
		Shape shape7 = ellipse4.createShape(scale);

		ellipse2.createShape(scale);
		ellipse3.createShape(scale);
		ellipse4.createShape(scale);

		Shape shape1 = Shape.union(shape2, shape3);
		Shape shape5 = Shape.union(shape1, shape4);
		Shape shape8 = Shape.union(shape5, shape6);
		Shape shape9 = Shape.union(shape8, shape7);

		return shape9;
	}

	@Override
	public boolean contains(double x, double y) {
		return ellipse1.contains(x, y) || ellipse2.contains(x, y) || ellipse3.contains(x, y) || ellipse4.contains(x, y) || rectangle.contains(x,y);
	}

	@Override
	public boolean isValid() {
		return a > 0 && b > 0;
	}

	@Override
	public void initialize() {
		do {
			System.out.println("Anfangspunkt:");
			points[0].initialize();
			System.out.println("a:");
			a = Help.INPUT.nextDouble();
			System.out.println("b:");
			b = Help.INPUT.nextDouble();

		} while (!isValid());
		calculateFigures();
	}

	@Override
	public double calculatePerimeter() {
		return rectangle.calculatePerimeter() +  (ellipse1.calculatePerimeter()+ellipse2.calculatePerimeter()+ellipse3.calculatePerimeter()+ellipse4.calculatePerimeter()) / 2;
	}

	@Override
	public double calculateArea() {
		return rectangle.calculateArea() + (ellipse1.calculateArea()+ellipse2.calculateArea()+ellipse3.calculateArea()+ellipse4.calculateArea()) / 2;
	}

	@Override
	public String getType() {
		return (a == b) ? "regular" : "irregular";
	}

	@Override
	public String toString() {
		return points[0] + " - " + "{ " + a + " , " + b + " }";
	}

	@Override
	public boolean equal(GeometricObject otherGeometricObject) {
		if (otherGeometricObject instanceof Quatrefoil) {
			Quatrefoil otherQuatrefoil = (Quatrefoil) otherGeometricObject;
			boolean sameA = Help.equal(a, otherQuatrefoil.a);
			boolean sameB = Help.equal(b, otherQuatrefoil.b);
			boolean sameReversedA = Help.equal(a, otherQuatrefoil.b);
			boolean sameReversedB = Help.equal(b, otherQuatrefoil.a);

			return (sameA && sameB) || (sameReversedA && sameReversedB);
		} else {
			return false;
		}
	}
}