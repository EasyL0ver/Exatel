-- API --

function split(inputstr, sep)
	local t={} ; i=1
	for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
		t[i] = str
		i = i + 1
	end
	return t
end

function loadConfig(filename, config)
  if fs.exists(filename) == false then
    saveConfig(filename, config)
    return false
  end

  local file = fs.open(filename, "r")
  config = {}

  while true do
    local line = file.readLine()
    if line == nil then
      break
    end
    
    local params = split(line, "=")
    config[params[1]] = params[2]
  end

  file.close()

  return config
end

function saveConfig(filename, config)
  local file = fs.open(filename, "w")

  for i, v in pairs(config) do
    file.writeLine(i.."="..v)
  end

  file.close()

  return true
end

-- INIT --
local Interface = peripheral.wrap("back")
local canvas = Interface.canvas()

-- CONSTANT --

local VERSION = "1.0"

local COMPUTER_SERVER = 23
local CONFIG_FILENAME = "neural.conf"

-- CONFIG --

local CONFIG = {}
CONFIG["FOOD"] = "true"
CONFIG["FOOD_REFILL"] = "19"
CONFIG["FOOD_REFRESH_RATE"] = "5"
CONFIG["CANVAS_COORD"] = "{0, 50}"
CONFIG["CANVAS_SCALE"] = "0.5"

CONFIG = loadConfig(CONFIG_FILENAME, CONFIG)
if CONFIG == false then
	print("Configuration has been generated, you can edit it:")
	print("=> edit "..CONFIG_FILENAME)
	return
end

-- VARS --

local powerMessage = ""
local powerOutput = ""
local dieselMessage = ""
local stargateMessage = ""

local timerFood = nil

-- FOOD --
--  VARS

local inv = nil
local cachedSlot = nil

--  FUNCTION

function InitFood()
	if Interface.hasModule("plethora:introspection") then
		inv = Interface.getInventory()
		cachedSlot = nil
	end
end

function SearchFood()
    local data = Interface.getMetaOwner()
    while data.food.hunger <= CONFIG["FOOD_REFILL"] do
        local item
        if cacheckSlot then
            local slotItem = inv.getItem(cachedSlot)
            if slotItem and slotItem.consume then
                item = slotItem
            else
                cachedSlot = nil
            end
        end
        if not item then
            for slot, meta in pairs(inv.list()) do
                local slotItem = inv.getItem(slot)
                if slotItem and slotItem.consume then
                    item = slotItem
                    cachedSlot = slot
                end
            end
        end
        if item then
            item.consume()
        else
            break
        end
        data = Interface.getMetaOwner()
    end
end

-- CANVAS --

local infoGroup

local storageText
local powerText
local dieselText

local stargateText

function InitHUD()
	canvas.clear()
	infoGroup = canvas.addGroup(CONFIG["CANVAS_COORD"])
	
	local yCoord = 0
	local scale = CONFIG["CANVAS_SCALE"]
	
	storageText = infoGroup.addText({5, yCoord}, "")
	yCoord = yCoord + (scale * 10)
	powerText = infoGroup.addText({5, yCoord}, "")
	yCoord = yCoord + (scale * 10)
	dieselText = infoGroup.addText({5, yCoord}, "")
	yCoord = yCoord + (scale * 10)
	yCoord = yCoord + (scale * 10)
	stargateText = infoGroup.addText({5, yCoord}, "")
  
	storageText.setScale(scale)
	powerText.setScale(scale)
	dieselText.setScale(scale)
	stargateText.setScale(scale)
end

function updateHUD()
	stargateText.setText("")
	storageText.setText(powerMessage)
	powerText.setText(powerOutput)
	dieselText.setText(dieselMessage)
	stargateText.setText(stargateMessage)
end

-- TIMER --

function InitTimer()
	if CONFIG["FOOD"] then
		if Interface.hasModule("plethora:introspection") then
			timerFood = os.startTimer(CONFIG["FOOD_REFRESH_RATE"])
		else
			print("You need an 'Introspection module' equipped to use the auto feeder")
		end
	end
end

-- UPDATER --
function receiveUpdate(file)
	local f = fs.open("Temp", "w")
	f.write(file)
	f.close()
	os.reboot()
end

-- MAIN --

print("Starting Neural Interface v"..VERSION)

rednet.open("top")

InitHUD()
InitTimer()
InitFood()

while true do 
	local event, arg1, arg2, arg3, arg4, arg5 = os.pullEvent()
	if (event == "rednet_message") then
		local id = arg1
		if (id ~= computerSource) then return end
		if (arg2[1] == "Updater") then
			receiveUpdate(arg2[2])
		end
		id = arg2[1]
		local info = arg2[2]
		local message1 = arg2[3]
		local message2 = arg2[4]
		if (info == "power") then
			powerMessage = message1
			powerOutput = message2
		elseif (info == "diesel") then
			dieselMessage = message1
		elseif (info == "stargate") then
			stargateMessage = message1
		end
		updateHUD()
	elseif event == "timer" then
		if (arg1 == timerFood) then
			timerFood = os.startTimer(foodRefreshRate)
			SearchFood()
		end
	end
end