
public class RmiClientServiceImpl implements RmiClientService {

    private static final short serverPort = 8081;

    @Override
    public Object invokeStatic(Class<?> clazz, Method method, Object... params) {
        try(Socket socket = new Socket("localhost", serverPort)) {
            ObjectOutputStream os = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream is = new ObjectInputStream(socket.getInputStream());
            os.writeByte(Marker.INVOKE_STATIC);
            os.writeObject(clazz.getName());
            os.writeObject(method.getName());
            os.writeInt(params.length);
            for (Object param : params) {
                os.writeObject(param);
            }
            byte marker = is.readByte();
            switch (marker) {
                case Marker.SUCCESS:
                    return is.readObject();
                case Marker.EXCEPTION:
                    String exceptionName = (String) is.readObject();
                    Class<?> exception = Class.forName(exceptionName);
                    // ?????
                    break;
                default:
                    throw  new UnsupportedOperationException();
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;

    }

        @Override
    public void init(Object localReceiverReference, Constructor constructor, Object... params) {

    }

    @Override
    public Object invokeOn(Object localReceiverReference, Method method, Object... params) {
        return null;
    }
}

public class RmiServerServiceImpl implements RmiServerService {

    @Override
    public void launch(int port) {
            try (ServerSocket server = new ServerSocket(port)) {
                while (true) {
                    try(Socket client = server.accept()) {
                        ObjectInputStream is = new ObjectInputStream(client.getInputStream());
                        ObjectOutputStream os = new ObjectOutputStream(client.getOutputStream());
                        byte marker = is.readByte();
                        switch (marker) {
                            case Marker.INVOKE_STATIC: {
                                String className = (String) is.readObject();
                                Class<?> clazzName = Class.forName(className);
                                Method method = (Method) is.readObject();
                                int paramNum = is.readInt();
                                Object[] params = new Object[paramNum];
                                for (int i = 0; i < paramNum; i++) {
                                    params[i] = is.readObject();
                                }
                                try {
                                    Object result = invokeOnRequest(clazzName, method, params);
                                    os.writeByte(Marker.SUCCESS);
                                    os.writeObject(result);
                                } catch (Exception e) {
                                    Class<?> exceptionClass = e.getClass();
                                    os.writeByte(Marker.EXCEPTION);
                                    os.writeObject(exceptionClass.getName());
                                }
                                os.flush();
                                break;
                            }
                            case Marker.INIT: {
                                break;
                            }
                            case Marker.INVOKE_ON: {
                                break;
                            }
                            default: throw  new UnsupportedOperationException();
                        }

                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }

    }

    private Object invokeStaticRequest(Class<?> clazz, Method method, Object... params) throws IllegalAccessException, InstantiationException, InvocationTargetException {
        Object o = clazz.newInstance();
        return method.invoke(o, params);
    }

    private void initRequest(Object localReceiverReference, Constructor constructor, Object... params) {

    }


    private Object invokeOnRequest(Object localReceiverReference, Method method, Object... params) {
        return null;
    }
}