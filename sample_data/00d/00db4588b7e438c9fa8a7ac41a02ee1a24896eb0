from random import randrange


def concat1(*args) -> str:
	# return "".join([str(a) for a in args])
	return "".join(map(str, args))


def concat2(*args) -> str:
	result = str()

	for arg in args:
		result += str(arg) if arg else ""

	return result


def concat3(*args) -> str:
	result = str()

	for arg in args:
		result = f"{result}{arg}"

	return result


def concat4(*args) -> str:
	result = str()

	for arg in args:
		result = "{}{}".format(result, arg)

	return result


def concat5(*args) -> str:
	return ("{}" * len(args)).format(*args)


def randomizer(items: int):
	for i in range(items):
		word = str()
		for j in range(randrange(5, 100)):
			word = "{}{}".format(word, chr(randrange(32, 122)))

		yield word


if __name__ == '__main__':
    from timeit import Timer

    print("Build data")
    test_data = list(randomizer(10000))
    print("Test data prepped")

    test1 = Timer(stmt=f"concat1(*{test_data})", setup="from __main__ import concat1")
    print("Begin Concat-Test: Join")
    print(test1.timeit(100))
    print("Check Value1: ", hash(concat1(test_data)))
    # 0.12899156499999997

    test2 = Timer(stmt=f"concat2(*{test_data})", setup="from __main__ import concat2")
    print("Begin Concat-Test: Addition")
    print(test2.timeit(100))
    print("Check Value2: ", hash(concat2(test_data)))
    # 0.313632296

    test3 = Timer(stmt=f"concat3(*{test_data})", setup="from __main__ import concat3")
    print("Begin Concat-Test: F-String")
    print(test3.timeit(100))
    print("Check Value3: ", hash(concat3(test_data)))
    # 8.883265362

    test4 = Timer(stmt=f"concat4(*{test_data})", setup="from __main__ import concat4")
    print("Begin Concat-Test: Format-String")
    print(test4.timeit(100))
    print("Check Value4: ", hash(concat4(test_data)))
    # 8.987258288000001

    test5 = Timer(stmt=f"concat5(*{test_data})", setup="from __main__ import concat5")
    print("Begin Concat-Test: Multiply Format-String")
    print(test5.timeit(100))
    print("Check Value5: ", hash(concat5(test_data)))
    # 0.07159832800000032