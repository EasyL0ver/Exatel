class Solution:
    def flipEquiv(self, root1, root2):
        """
       :type root1: TreeNode
       :type root2: TreeNode
       :rtype: bool
       """

        def equal(node1, node2):
            # type: (TreeNode, TreeNode) -> bool
            return node1 == node2 or (node1 is not None and node2 is not None and node1.val == node2.val)
            #return (None if node1 is None else node1.val) == (None if node2 is None else node2.val)

        def flip_equiv(node1, node2):
            if node1 is None:
                return True
            if equal(node1.left, node2.left) and equal(node1.right, node2.right):
                return flip_equiv(node1.left, node2.left) and flip_equiv(node1.right, node2.right)
            if equal(node1.left, node2.right) and equal(node1.right, node2.left):
                return flip_equiv(node1.left, node2.right) and flip_equiv(node1.right, node2.left)
            return False

        return equal(root1, root2) and flip_equiv(root1, root2)