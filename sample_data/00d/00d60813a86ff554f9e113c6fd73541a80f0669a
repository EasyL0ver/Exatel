import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Objects;
 
public class Sudoku01 {
 
    public static void usage() {
        System.out.printf("\nInvalid input.\nPlease, follow the on-screen instructions.\n");
    }
 
    /**
     * Print a game menu message to the console.
     */
    public static void printMenu() {
        System.out.print("\n" +
                "1. Set field\n" +
                "2. Clear field\n" +
                "3. Print game\n" +
                "4. Exit\n\n" +
                "Select an action [1-2]: ");
    }  
 
    /**
     * Read a single integer value from the console and return it.
     * This function blocks the program's execution until a user
     * entered a value into the command line and confirmed by pressing
     * the Enter key.
     * @return The user's input as integer or -1 if the user's input was invalid.
     */
    public static int parseInput() {
        Scanner in = new Scanner(System.in);
        try {
            return in.nextInt();
        } catch (InputMismatchException missE) {
            in.next(); // discard invalid input
            return -1;
        }
    }  
 
    /**
     * Display a dialog requesting a single integer which is returned
     * upon completion.
     *
     * The dialog is repeated in an endless loop if the given input
     * is not an integer or not within min and max bounds.
     *
     * @param msg: a name for the requested data.
     * @param min: minium accepted integer.
     * @param max: maximum accepted integer.
     * @return The user's input as integer.
     */
    public static int requestInt(String msg, int min, int max) {
        Objects.requireNonNull(msg);
 
        while(true) {
            System.out.print("Please provide " + msg + ": ");
            int input = parseInput();
            if (input >= min && input <= max) return input;
            else {
                System.out.println("Invalid input. Must be between " + min + " and " + max);
            }
        }
    }
 
    /**
     * Display formatted game grid to System.out.
     *
     * @param grid: game grid array
     */
    public static void printGrid(int[][] grid) {
        int numRows = grid.length;
        int numCols = grid[0].length;
 
        System.out.printf("   ");
        for (int i = 0; i < numCols; i++) {
            if ((i > 0) && (i % 3 == 0))
                System.out.printf(" ");
            System.out.printf("%d ", i);
        }
        System.out.printf("\n\n");
 
 
        for (int i = 0; i < numRows; i++) {
            System.out.printf("%d  ", i);
            for (int j = 0; j < numCols; j++) {
                if ((j > 0) && (j % 3 == 0))
                    System.out.printf(" ");
 
                System.out.printf("%d ", grid[i][j]);
            }
            if ((i > 0) && ((i+1) % 3 == 0))
                System.out.printf("\n");
            System.out.printf("\n");
        }
    }
 
    public static void setField(int[][] grid, boolean clear, int min, int max) {
        int x = requestInt("Input row number",    min, max);
        int y = requestInt("Input column number", min, max);
 
        if (clear) grid[x][y] = 0;
        else {
            int newValue = requestInt("Input new value", min, max);
            grid[x][y] = newValue;
        }
    }
 
    public static void main(String[] args) {
        final int MAX_FIELD = 9;
        final int MIN_FIELD = 0;
 
        int[][] grid = {
            {9,4,0,1,0,2,0,5,8},
            {6,0,0,0,5,0,0,0,4},
            {0,0,2,4,0,3,1,0,0},
            {0,2,0,0,0,0,0,6,0},
            {5,0,8,0,2,0,4,0,1},
            {0,6,0,0,0,0,0,8,0},
            {0,0,1,6,0,8,7,0,0},
            {7,0,0,0,4,0,0,0,3},
            {4,3,0,5,0,9,0,1,2}
        };
 
        boolean gameExited = false;
 
        while (!gameExited) {
        printGrid(grid);
            printMenu();
            int selectedOption = parseInput();
 
            switch (selectedOption) {
                case 1:
                    setField(grid, false, MIN_FIELD, MAX_FIELD);
                    break;
 
                case 2:
                    setField(grid, true, MIN_FIELD, MAX_FIELD);
                    break;
 
                case 3:
                    printGrid(grid);
                    break;
 
                case 4:
                    gameExited = true;
                    break;
 
                default:
                    usage();
                    break;
            }
        }
    }
}