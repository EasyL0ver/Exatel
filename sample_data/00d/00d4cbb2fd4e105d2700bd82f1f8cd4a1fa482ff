package search;

import java.util.ArrayList;
import java.util.List;

public class BinarySearchMissing {
    public static void main(String[] args){
        int x = Integer.parseInt(args[0]);
        ArrayList<Integer> array = new ArrayList<Integer>();
        for (int i = 1; i < args.length; i++){
            array.add(Integer.parseInt(args[i]));
        }
//        int left = 0, right = array.size() - 1;
//        boolean found = false;
//        while (left <= right){
//            int middle = (left + right) / 2;
//            if (array.get(middle) > x) {
//                left = middle + 1;
//            }
//            else {
//                if (array.get(middle) == x) found = true;
//                right = middle - 1;
//            }
//        }
//        if (found) System.out.println(left);
//        else System.out.println(-(left + 1));
        System.out.println(recursiveBinarySearch(array, 0, array.size() - 1, x));
    }
    private static int recursiveBinarySearch(List<Integer> array, int left, int right, int x) {
        // array is sorted by non-increasing
        // x >= -2147483648 && x <= 2147483647
        // left >= 0, right < array.size()
        if (left > right) {
            if (left > array.size() - 1 || array.get(left) != x) {
                // x not found or array is empty
                return -(left + 1);
            } else {
            // x found
                return left;
            }
        }
        // left <= right
        int mid = (left + right) / 2;
        // left <= mid <= right
        // 0 <= mid < array.size()
        if (array.get(mid) > x) {
            // x to the right of mid
            return recursiveBinarySearch(array, mid + 1, right, x);
        } else {
            // x to the left of mid
            return recursiveBinarySearch(array, left, mid - 1, x);
        }
    }
}