// Grid system in landscape:

// Grid system
columns($col = 1, $col-width = $grid-column-width, $gutter-width = $grid-gutter-width)
  width: ($col-width * $col) + ($gutter-width * ($col - 1))

fluid-columns($col = 1, $col-width = $fluid-grid-column-width, $gutter-width = $fluid-grid-gutter-width)
  width: 1% * ($col-width * $col) + ($gutter-width * ($col - 1))

offset($col = 1, $col-width = $grid-column-width, $gutter-width = $grid-gutter-width)
  margin-left: ($col-width * $col) + ($gutter-width * ($col - 1)) + ($gutter-width * 2)

// Necessary grid styles for every column to make them appear next to each other horizontally
grid-column()
  float: left
  margin-left: $grid-gutter-width

fluid-grid-column()
  float: left
  margin-left: $fluid-grid-gutter-width

// this can be used to mark any element (e.g., .content-primary) as a 
// column without changing markup to .span something
make-column($col = 1)
  grid-column()
  columns($col)

// Table columns
table-columns($col = 1)
  float: none
  width: (($grid-column-width) * $col) + ($grid-gutter-width * ($col - 1)) - 16
  margin-left: 0

// Grid system in bootstrap:

// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-left: auto;
  margin-right: auto;
  .clearfix();
}

// Table columns
.tableColumns(@columnSpan: 1) {
  float: none; // undo default grid column styles
  width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
  margin-left: @gridGutterWidth * -1;
  .clearfix();
}
.makeColumn(@columns: 1) {
  float: left;
  margin-left: @gridGutterWidth;
  width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {

  .core (@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      (~".span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .offsetX (@index) when (@index > 0) {
      (~".offset@{index}") { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}

    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1)) + (@gridGutterWidth * 2);
    }

    .span (@columns) {
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    }

    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }

    [class*="span"] {
      float: left;
      margin-left: @gridGutterWidth;
    }

    // Set the container width, and override it for fixed navbars in media queries
    .container,
    .navbar-fixed-top .container,
    .navbar-fixed-bottom .container { .span(@gridColumns); }

    // generate .spanX and .offsetX
    .spanX (@gridColumns);
    .offsetX (@gridColumns);

  }

  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      (~"> .span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .span (@columns) {
      width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
    }

    .row-fluid {
      width: 100%;
      .clearfix();
      > [class*="span"] {
        float: left;
        margin-left: @fluidGridGutterWidth;
      }
      > [class*="span"]:first-child {
        margin-left: 0;
      }

      // generate .spanX
      .spanX (@gridColumns);
    }

  }

  .input(@gridColumnWidth, @gridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      (~"input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .span(@columns) {
      width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 10;
    }

    input,
    textarea,
    .uneditable-input {
      margin-left: 0; // override margin-left from core grid system
    }

    // generate .spanX
    .spanX (@gridColumns);

  }

}