// this is JavaScript code to be used in Tasker for android 
// to track app usage, and 'lock' apps after they have been
// used too much in a day. The code here just updates a global
// variable holding a JSON object to track how long has been
// spent in each app, and another which holds the time when
// the current app should be locked


var var_doss_state = 'STATE_DOSS';
var var_doss_alarm_times = 'TEMP_DOSS_LIMIT';

function dossGetState() {
	let state = global(var_doss_state);
	if ( state == '' ) {
        WL('Found empty string in %STATE_DOSS', 3);
        exit(); }
    WL(state);
    return parse( state );
}
function dossSetState(obj) {
	let newstate = stringify(obj);
    if( newstate == '' ) {
        WL( 'Tried to set empty string in \%STATE_DOSS', 3);
      exit(); }
 
    setGlobal(var_doss_state, newstate );
    WL('Setting doss: ' + newstate);
}
function dossStartTimer(acpackage) {
	let state = dossGetState();

    if( 'pkg' in state ) {
        WL('Current pkg set to ' + state.pkg + ' when entering ' + acpackage, 3);
        exit(); }

    let times = TIMES();
    // Get the state vars
    let allowance = state.allowance;
    let used = state[acpackage];
    if( used == undefined ) used = 0;

    // Calc when the remaining allowance will run out
    let remaining = Math.floor(allowance - used);
    // This triggers alarm profile
    setGlobal(var_doss_alarm_times, remaining + times);

    // Save details for the pause task
    state.start_time = times;
    state.pkg = acpackage;
    // Save state
    dossSetState(state);

    // Make a nice notification
    let d = new Date( (remaining + times)*1000 );
    let nice_time = TIME(d)
    notify("Stop dossing!", "Time in " + acpackage + " runs out at " + nice_time);
}
function dossPauseTimer() {
    let state = dossGetState();

    // Just in case
    if( ! 'pkg' in state ) {
        WL( 'Doss pkg not set', 3);
        exit(); }

    let pkg   = state.pkg;
    let times = TIMES();

    // Check vars and calculate time
    let start_time = state.start_time;
    let previous   = state[pkg];
    if( start_time == undefined ) {
        WL(`Start time for ${pkg} not set; state was ${stringify(state)}`, 3);
        exit(); }
    if( previous == undefined )
        previous = 0;
    let used = previous+times-start_time;

    // Save updated values
    state[pkg] = used;
    delete state.start_time;
    delete state.pkg;
    
    dossSetState(state);

    autonotifyCancel("Stop dossing!");
    setGlobal(var_doss_alarm_times, '');
}

/////////
// go
/////////

let profile = getCallingProfile();
if(! profileActive(profile) )
    exit();

let state_string = global(var_doss_state);

if('' == state_string) {
    setGlobal(var_doss_state, stringify({allowance: 3600}) );
    WL('Doss state was empty', 2);
    exit();
}
else if (state_string.includes('"pkg":"'))
// || profile == 'Doss Pause timer')
    dossPauseTimer();

if(profile.startsWith('Doss Enter ')) {
    let category = profile.replace(/Doss Enter (.*) [\d\w]+/, '$1');
    dossStartTimer(category);
}