#include <NewPing.h>

/* DEFINICION DE PINES */ 
const byte _ECHO= 2;
const byte _TRIG= 3; 
const byte _LEFTPOS= 4;
const byte _LEFTNEG= 5;
const byte _RIGHTPOS= 6;
const byte _RIGHTNEG= 7;
const byte _COLOROUT= 8;
const byte _S0= 9;
const byte _S1= 10;
const byte _S2= 11;
const byte _S3= 12;
/* FIN DEFINICIÓN DE PINES */

/* DEFINICIÓN DE CONSTANTES */
#define _GREEN 1
#define _BLUE 2
#define _RED 3
#define _CLEAR 4
#define _RR 12 
#define _RG 42
#define _RB 25
#define _GR 23
#define _GG 20
#define _GB 23
#define _BR 39
#define _BG 22
#define _BB 12
#define _RANGE 5
#define _MINDIST 10
#define _LEFTADJUST 180
#define _TIMEREVERSE 600
#define _TIMERIGHT 725
#define _TIMELEFT 725
/* FIN DEFINICIÓN DE CONSTANTES */

/* DEFINICIÓN DE OBJETOS */
NewPing sensor  = NewPing(_TRIG, _ECHO, 200);
/* FIN DEFINICIÓN DE OBJETOS */

void followObjective() //Brain of the code
{
  delay(100);
  goForward();
  int distance; 
  do
  {
    distance=sensor.ping_cm();
    Serial.println(distance);
  }while(distance>=_MINDIST||distance==0);
  stopCar();
  digitalWrite(LED_BUILTIN, HIGH);
  int color;
  do
  {
    delay(100);
    color = readColor();
  }while(color==_CLEAR);
  digitalWrite(LED_BUILTIN, LOW);
  switch(color)
  {
    case _RED:
      goReverse();
      delay(_TIMEREVERSE);
      turnLeft();
      delay(_TIMELEFT);
      stopCar();
      followObjective();
      break;
    case _BLUE:
      while(true)
      {
        delay(200);
        digitalWrite(LED_BUILTIN, HIGH); //Indicates program is finished
        delay(200);
        digitalWrite(LED_BUILTIN, LOW);
      }
      break;
    case _GREEN:
      goReverse();
      delay(_TIMEREVERSE);
      turnRight();
      delay(_TIMERIGHT);
      stopCar();
      followObjective();
      break;
  }
}

void pinModes() //Set the pins as output or input.
{
  pinMode(_RIGHTPOS, OUTPUT);
  pinMode(_RIGHTNEG, OUTPUT);
  pinMode(_LEFTPOS, OUTPUT);
  pinMode(_LEFTNEG, OUTPUT);
  pinMode(_S0, OUTPUT);
  pinMode(_S1, OUTPUT);
  pinMode(_S2, OUTPUT);
  pinMode(_S3, OUTPUT);
  pinMode(_COLOROUT, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
}

void setOutputs() //Inicializate the state of the outputs.
{
  digitalWrite(LED_BUILTIN, LOW);
  digitalWrite(_S0, HIGH);
  digitalWrite(_S1, HIGH); 
  stopCar();
}

bool isOnRange(int reference, int value) //Checks if is on tolerancy
{
  return (value<=(reference+_RANGE) && value>=(reference-_RANGE));
}

void stopCar() //Stopped car
{
  digitalWrite(_RIGHTPOS, LOW);
  digitalWrite(_LEFTPOS, LOW);
  digitalWrite(_RIGHTNEG, LOW);
  digitalWrite(_LEFTNEG, LOW);
}

void goForward() //Car goes forward
{
  digitalWrite(_RIGHTPOS, HIGH);
  analogWrite(_LEFTPOS, _LEFTADJUST);
  digitalWrite(_RIGHTNEG, LOW);
  digitalWrite(_LEFTNEG, LOW);
}

void goReverse() //Car goes reverse
{
  digitalWrite(_RIGHTPOS, LOW);
  digitalWrite(_LEFTPOS, LOW);
  digitalWrite(_RIGHTNEG, HIGH);
  analogWrite(_LEFTNEG, _LEFTADJUST);
}

void turnLeft() //Cars turns left
{
  digitalWrite(_RIGHTPOS, LOW);
  analogWrite(_LEFTPOS, _LEFTADJUST);
  digitalWrite(_RIGHTNEG, LOW);
  digitalWrite(_LEFTNEG, LOW);
}

void turnRight() //Car turns right
{
  digitalWrite(_RIGHTPOS, HIGH);
  digitalWrite(_LEFTPOS, LOW);
  digitalWrite(_RIGHTNEG, LOW);
  digitalWrite(_LEFTNEG, LOW);
}

int readColor() //Reads the color
{
  digitalWrite(_S2, LOW);  
  digitalWrite(_S3, LOW);  
  int red = pulseIn(_COLOROUT, LOW);  
  Serial.print("R:"+ (String) red);  
  digitalWrite(_S2, HIGH); 
  digitalWrite(_S3, HIGH); 
  int green = pulseIn(_COLOROUT, LOW); 
  Serial.print(" G: "+ (String) green);  
  digitalWrite(_S2, LOW);  
  digitalWrite(_S3, HIGH);  
  int blue = pulseIn(_COLOROUT, LOW);
  Serial.print(" B: "+(String)blue);  
  if(isOnRange(red, _RR) && isOnRange(blue, _RB) && isOnRange(green, _RG))
  {
    Serial.println(" RED"); 
    return _RED;
  }
  else if(isOnRange(red, _GR) && isOnRange(blue, _GB) && isOnRange(green, _GG))
  {
    Serial.println(" GREEN"); 
    return _GREEN;
  }
  else if(isOnRange(red, _BR) && isOnRange(blue, _BB) && isOnRange(green, _BG))
  {
    Serial.println(" BLUE"); 
    return _BLUE;
  }
  else
  {
    Serial.println(" CLEAR"); 
    return _CLEAR;
  }
}

void calibrateColorSensor() //Just for setting up color sensor
{
  Serial.println(sensor.ping_cm());
  readColor();
  delay(500);
  calibrateColorSensor();
}

void setup() 
{
  Serial.begin(9600); //For debbuging.
  pinModes();
  setOutputs();
  sensor = NewPing(_TRIG, _ECHO, 200);
  //calibrateColorSensor(); //Comment call to run program
  delay(1500);
}

void loop() 
{
  followObjective();  
}