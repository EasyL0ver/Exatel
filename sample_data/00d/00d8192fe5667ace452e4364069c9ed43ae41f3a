composer require illuminate/mail "^5.6"
composer require illuminate/notifications "^5.6"
	
$app->configure('auth');
$app->configure('mail');

$app->register(IlluminateNotificationsNotificationServiceProvider::class);
$app->register(IlluminateMailMailServiceProvider::class);
$app->alias('mailer', IlluminateContractsMailMailer::class);
$app->withFacades();
	
Schema::create('password_resets', function (Blueprint $table) {
    $table->string('email')->index();
    $table->string('token');
    $table->timestamp('created_at')->nullable();
});
	
use IlluminateAuthPasswordsPasswordBrokerManager;
use IlluminateSupportFacadesPassword;
use LaravelLumenRoutingController;
use IlluminateHttpRequest;

class AuthController extends Controller
{
    // 1. Send reset password email
    public function generateResetToken(Request $request)
    {
        // Check email address is valid
        $this->validate($request, ['email' => 'required|email']);

        // Send password reset to the user with this email address
        $response = $this->broker()->sendResetLink(
            $request->only('email')
        );

        return $response == Password::RESET_LINK_SENT
            ? response()->json(true)
            : response()->json(false);
    }

    // 2. Reset Password
    public function resetPassword(Request $request)
    {
        // Check input is valid
        $rules = [
            'token'    => 'required',
            'username' => 'required|string',
            'password' => 'required|confirmed|min:6',
        ];
        $this->validate($request, $rules);

        // Reset the password
        $response = $this->broker()->reset(
        $this->credentials($request),
            function ($user, $password) {
                $user->password = app('hash')->make($password);
                $user->save();
            }
        );

        return $response == Password::PASSWORD_RESET
            ? response()->json(true)
            : response()->json(false);
    }

    /**
     * Get the password reset credentials from the request.
     *
     * @param  IlluminateHttpRequest  $request
     * @return array
     */
    protected function credentials(Request $request)
    {
        return $request->only('username', 'password', 'password_confirmation', 'token');
    }

    /**
     * Get the broker to be used during password reset.
     *
     * @return IlluminateContractsAuthPasswordBroker
     */
    public function broker()
    {
        $passwordBrokerManager = new PasswordBrokerManager(app());
        return $passwordBrokerManager->broker();
    }
}
	
use IlluminateAuthPasswordsCanResetPassword as CanResetPasswordTrait;
use IlluminateContractsAuthCanResetPassword as CanResetPasswordInterface;
use IlluminateNotificationsNotifiable;

class User extends Model implements CanResetPasswordInterface
{
    use CanResetPasswordTrait;
    use Notifiable;

    ...
}