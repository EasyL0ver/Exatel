import math
import numpy
import tensorflow as tf

class Example(object):
    def __init__(self, x1, x2, y):
        super(Example, self).__init__()
        self.feature_vector = numpy.array([1, (x1 - 50) / 50.0, (x2 - 50) / 50.0, ((x1 - 50) / 50.0) ** 2, ((x2 - 50) / 50.0) ** 2])
        if y == "red":
            self.output_vector = numpy.array([1, 0, 0])
        elif y == "green":
            self.output_vector = numpy.array([0, 1, 0])
        elif y == "blue":
            self.output_vector = numpy.array([0, 0, 1])


if __name__ == "__main__":
    training_examples = [
        Example(6,  48, "red"),
        Example(8,  11, "red"),
        Example(15,  1, "red"),
        Example(16, 19, "red"),
        Example(22, 40, "red"),
        Example(25, 33, "red"),
        Example(30, 49, "red"),
        Example(31, 44, "red"),
        Example(32, 29, "red"),
        Example(38,  2, "red"),
        Example(53, 63, "green"),
        Example(50, 55, "green"),
        Example(90, 70, "green"),
        Example(69, 59, "green"),
        Example(76, 28, "green"),
        Example(86, 33, "green"),
        Example(51, 55, "green"),
        Example(88, 57, "green"),
        Example(85, 54, "green"),
        Example(60, 62, "green"),
        Example(14, 66, "blue"),
        Example(13, 76, "blue"),
        Example(40, 82, "blue"),
        Example(10, 98, "blue"),
        Example( 6, 51, "blue"),
        Example(47, 62, "blue"),
        Example(40, 85, "blue"),
        Example(11, 59, "blue"),
        Example(26, 95, "blue"),
        Example(20, 88, "blue")
    ]

    learning_rate = 0.1

    example_input = tf.placeholder(tf.float32, [None, 5])
    example_output = tf.placeholder(tf.float32, [None, 3])
    feeds = {
        example_input: [ex.feature_vector for ex in training_examples],
        example_output: [ex.output_vector for ex in training_examples]
    }

    # theta has a row for each feature and a column for each class
    theta_shape = (training_examples[0].feature_vector.shape[0], training_examples[0].output_vector.shape[0])
    theta = tf.Variable(tf.zeros(theta_shape))

    model = 1.0 / (1 + tf.exp(tf.matmul(example_input, theta)))
    cost = -1.0 / len(training_examples) * tf.reduce_sum(example_output * tf.log(model) + (1 - example_output) * tf.log(1 - model))

    calculate_gradients = tf.gradients(xs=theta, ys=cost)[0]
    update_theta = theta.assign(theta - tf.multiply(learning_rate, calculate_gradients))

    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        print("Starting cost: %s" % sess.run(cost, feed_dict=feeds))

        gradients = numpy.ones(theta_shape)
        iter_count = 0
        while numpy.sum(numpy.absolute(gradients)) > 0.04:
            gradients = sess.run(calculate_gradients, feed_dict=feeds)
            new_theta = sess.run(update_theta, feed_dict=feeds)
            iter_count += 1
            if (0 == iter_count % 1000):
                print("Cost after %s iterations: %s" % (iter_count, sess.run(cost, feed_dict=feeds)))
        print("Final cost = %s" % sess.run(cost, feed_dict=feeds))
        print("Red: %s" % ", ".join([("theta[%d] = %0.2f" % (i, new_theta[i][0])) for i in range(training_examples[0].feature_vector.shape[0])]))
        print("Green: %s" % ", ".join([("theta[%d] = %0.2f" % (i, new_theta[i][1])) for i in range(training_examples[0].feature_vector.shape[0])]))
        print("Blue: %s" % ", ".join([("theta[%d] = %0.2f" % (i, new_theta[i][2])) for i in range(training_examples[0].feature_vector.shape[0])]))
        print("in %d iterations" % iter_count)