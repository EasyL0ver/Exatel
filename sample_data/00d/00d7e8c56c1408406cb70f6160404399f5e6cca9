def get_vtx_data_np(self):
        """
        Generate Vertex Data Structure
        Calculate Vertex Coordinate Xforms with Numpy Matrix Multiplication
        Collect Blender Vertex Data with RNA access
        Create and Return numpy arrays for raw array access
        :return: vertex_positions, vertex_normals, vertex_uvs(avg)
        """
        mesh = self.bpy_data
        vertices = mesh.vertices
        tessfaces = mesh.tessfaces
        vtx_len = len(vertices)
        tessface_len = len(tessfaces)
        bm = bmesh.new() # Create a new bmesh from the current mesh and tessellate
        bm.from_mesh(mesh)
        bm.calc_tessface()
        bm_verts = bm.verts
        
        # Get Vertex Indices, Positions, Normals, and UVs
        idx_list = np.zeros((tessface_len * 4), dtype=np.uint64)
        tessfaces.foreach_get("vertices_raw", idx_list.ravel())
        idx_list.shape = (tessface_len, 4)
        tessquads = idx_list
        isquad = tessquads[:, 3] != 0  #create a list of masks where quads
        triangles = tessquads.copy()
        triangles[:, 3] = triangles[:, 2]  # make triangle from quad by welding last 2 vertices
        tessface_vertices = np.where(isquad[:, np.newaxis], tessquads, triangles)
        idx_list = tessface_vertices
        
        # Position
        vtx_pos = np.zeros(vtx_len * 3, dtype=float)
        vertices.foreach_get("co", vtx_pos.ravel())
        vtx_pos.shape = (vtx_len, 3)

        # Normal
        vtx_nrm = np.zeros(vtx_len * 3, dtype=float)
        vertices.foreach_get("normal", vtx_nrm.ravel())
        vtx_nrm.shape = (vtx_len, 3)

        # UVs
        if len(self.bpy_data.tessface_uv_textures) > 0:
            uv_layer = bm.loops.layers.uv.active
            vtx_uvs = self.get_uvs(bm_verts, uv_layer)
        else:
            vtx_uvs = np.zeros((vtx_len, 2), dtype=float)
        
        # Mask and Reshape Arrays based on updated Index List
        vtx_pos     = vtx_pos[idx_list[..., [0, 1, 2, 2, 3, 0]]].reshape(-1, 3, 3)
        vtx_nrm     = vtx_nrm[idx_list[..., [0, 1, 2, 2, 3, 0]]].reshape(-1, 3, 3)
        vtx_uvs     = vtx_uvs[idx_list[..., [0, 1, 2, 2, 3, 0]]].reshape(-1, 3, 2)
        
        bm.free() # Free the BMesh from memory since we are done with it
        # Return the raw numpy data forming the Vertex Data Structure
        return vtx_pos, vtx_nrm, vtx_uvs, idx_list